{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api',\n  // url = base url + request url\n  timeout: 15000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  if (store.state.user.token) {\n    // 让每个请求携带token\n    // 如果后端需要Bearer前缀，取消注释下面这行\n    // config.headers['Authorization'] = 'Bearer ' + getToken()\n\n    // 如果后端不需要Bearer前缀，使用这行\n    config.headers['Authorization'] = getToken();\n    console.log('发送请求携带token:', config.url, config.headers['Authorization']);\n  } else {\n    console.warn('发送请求没有token:', config.url);\n  }\n\n  // 记录请求的详细信息\n  console.log('请求详情:', {\n    url: config.url,\n    method: config.method,\n    params: config.params,\n    data: config.data\n  });\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.error('请求拦截器错误:', error); // for debug\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // 首先检查响应数据的类型\n  if (typeof response.data === 'boolean') {\n    // 如果直接返回true/false（如更新用户接口）\n    console.log('API响应布尔值:', response.data);\n    return response.data;\n  }\n  const res = response.data;\n\n  // 调试信息\n  console.log('API响应对象:', res);\n\n  // 如果返回的状态码不是200，说明请求异常\n  if (res.code !== 200) {\n    // 响应处理前，记录详细的错误信息\n    console.error('请求响应异常:', {\n      url: response.config.url,\n      statusCode: res.code,\n      message: res.message,\n      data: res.data\n    });\n    ElMessage({\n      message: res.message || '系统异常',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.code === 401 || res.code === 208) {\n      // 重新登录\n      store.dispatch('user/logout').then(() => {\n        location.reload();\n      });\n    }\n    return Promise.reject(new Error(res.message || '系统异常'));\n  } else {\n    return res;\n  }\n}, error => {\n  console.log('err', error); // for debug\n\n  // 获取请求的URL和方法\n  const url = error.config ? error.config.url : '未知URL';\n  const method = error.config ? error.config.method : '未知方法';\n  console.log(`请求失败: ${method.toUpperCase()} ${url}`);\n\n  // 打印详细错误信息\n  if (error.response) {\n    console.error('响应错误详情:', {\n      url: url,\n      method: method,\n      status: error.response.status,\n      statusText: error.response.statusText,\n      headers: error.response.headers,\n      data: error.response.data\n    });\n  } else {\n    console.error('网络错误:', error.message);\n  }\n  let errorMsg = '请求失败';\n  if (error.response && error.response.status) {\n    switch (error.response.status) {\n      case 401:\n        errorMsg = '未授权，请重新登录';\n        // 清除token并返回登录页\n        store.dispatch('user/logout').then(() => {\n          location.reload();\n        });\n        break;\n      case 403:\n        errorMsg = '拒绝访问';\n        break;\n      case 404:\n        errorMsg = '请求的资源不存在';\n        break;\n      case 500:\n        errorMsg = '服务器内部错误';\n        if (error.response.data && error.response.data.message) {\n          errorMsg += ': ' + error.response.data.message;\n        } else if (method.toLowerCase() === 'put' && url.includes('/sysUser')) {\n          errorMsg = '更新用户信息失败，请检查输入的数据格式';\n        }\n        break;\n      default:\n        errorMsg = error.message || '未知错误';\n    }\n  }\n  ElMessage({\n    message: errorMsg,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","store","getToken","service","create","baseURL","timeout","interceptors","request","use","config","state","user","token","headers","console","log","url","warn","method","params","data","error","Promise","reject","response","res","code","statusCode","message","type","duration","dispatch","then","location","reload","Error","toUpperCase","status","statusText","errorMsg","toLowerCase","includes"],"sources":["/Users/apple/Desktop/111111/zongheshixi/daijiaguanli/frontui/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport store from '@/store'\nimport { getToken } from '@/utils/auth'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api', // url = base url + request url\n  timeout: 15000 // 请求超时时间\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    // 在发送请求之前做些什么\n    if (store.state.user.token) {\n      // 让每个请求携带token\n      // 如果后端需要Bearer前缀，取消注释下面这行\n      // config.headers['Authorization'] = 'Bearer ' + getToken()\n      \n      // 如果后端不需要Bearer前缀，使用这行\n      config.headers['Authorization'] = getToken()\n      \n      console.log('发送请求携带token:', config.url, config.headers['Authorization'])\n    } else {\n      console.warn('发送请求没有token:', config.url)\n    }\n    \n    // 记录请求的详细信息\n    console.log('请求详情:', {\n      url: config.url,\n      method: config.method,\n      params: config.params,\n      data: config.data\n    });\n    \n    return config\n  },\n  error => {\n    // 对请求错误做些什么\n    console.error('请求拦截器错误:', error) // for debug\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    // 首先检查响应数据的类型\n    if (typeof response.data === 'boolean') {\n      // 如果直接返回true/false（如更新用户接口）\n      console.log('API响应布尔值:', response.data);\n      return response.data;\n    }\n    \n    const res = response.data;\n    \n    // 调试信息\n    console.log('API响应对象:', res);\n    \n    // 如果返回的状态码不是200，说明请求异常\n    if (res.code !== 200) {\n      // 响应处理前，记录详细的错误信息\n      console.error('请求响应异常:', {\n        url: response.config.url,\n        statusCode: res.code,\n        message: res.message,\n        data: res.data\n      });\n      \n      ElMessage({\n        message: res.message || '系统异常',\n        type: 'error',\n        duration: 5 * 1000\n      });\n      \n      // 401: 未登录或token过期\n      if (res.code === 401 || res.code === 208) {\n        // 重新登录\n        store.dispatch('user/logout').then(() => {\n          location.reload();\n        });\n      }\n      return Promise.reject(new Error(res.message || '系统异常'));\n    } else {\n      return res;\n    }\n  },\n  error => {\n    console.log('err', error); // for debug\n    \n    // 获取请求的URL和方法\n    const url = error.config ? error.config.url : '未知URL';\n    const method = error.config ? error.config.method : '未知方法';\n    console.log(`请求失败: ${method.toUpperCase()} ${url}`);\n    \n    // 打印详细错误信息\n    if (error.response) {\n      console.error('响应错误详情:', {\n        url: url,\n        method: method,\n        status: error.response.status,\n        statusText: error.response.statusText,\n        headers: error.response.headers,\n        data: error.response.data\n      });\n    } else {\n      console.error('网络错误:', error.message);\n    }\n    \n    let errorMsg = '请求失败';\n    if (error.response && error.response.status) {\n      switch (error.response.status) {\n        case 401:\n          errorMsg = '未授权，请重新登录';\n          // 清除token并返回登录页\n          store.dispatch('user/logout').then(() => {\n            location.reload();\n          });\n          break;\n        case 403:\n          errorMsg = '拒绝访问';\n          break;\n        case 404:\n          errorMsg = '请求的资源不存在';\n          break;\n        case 500:\n          errorMsg = '服务器内部错误';\n          if (error.response.data && error.response.data.message) {\n            errorMsg += ': ' + error.response.data.message;\n          } else if (method.toLowerCase() === 'put' && url.includes('/sysUser')) {\n            errorMsg = '更新用户信息失败，请检查输入的数据格式';\n          }\n          break;\n        default:\n          errorMsg = error.message || '未知错误';\n      }\n    }\n    \n    ElMessage({\n      message: errorMsg,\n      type: 'error',\n      duration: 5 * 1000\n    });\n    return Promise.reject(error);\n  }\n);\n\nexport default service "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,QAAQ,QAAQ,cAAc;;AAEvC;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC3BC,OAAO,EAAE,MAAM;EAAE;EACjBC,OAAO,EAAE,KAAK,CAAC;AACjB,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA,IAAIT,KAAK,CAACU,KAAK,CAACC,IAAI,CAACC,KAAK,EAAE;IAC1B;IACA;IACA;;IAEA;IACAH,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,CAAC;IAE5Ca,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,MAAM,CAACO,GAAG,EAAEP,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,CAAC;EAC1E,CAAC,MAAM;IACLC,OAAO,CAACG,IAAI,CAAC,cAAc,EAAER,MAAM,CAACO,GAAG,CAAC;EAC1C;;EAEA;EACAF,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE;IACnBC,GAAG,EAAEP,MAAM,CAACO,GAAG;IACfE,MAAM,EAAET,MAAM,CAACS,MAAM;IACrBC,MAAM,EAAEV,MAAM,CAACU,MAAM;IACrBC,IAAI,EAAEX,MAAM,CAACW;EACf,CAAC,CAAC;EAEF,OAAOX,MAAM;AACf,CAAC,EACDY,KAAK,IAAI;EACP;EACAP,OAAO,CAACO,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC,EAAC;EACjC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAnB,OAAO,CAACI,YAAY,CAACkB,QAAQ,CAAChB,GAAG,CAC/BgB,QAAQ,IAAI;EACV;EACA,IAAI,OAAOA,QAAQ,CAACJ,IAAI,KAAK,SAAS,EAAE;IACtC;IACAN,OAAO,CAACC,GAAG,CAAC,WAAW,EAAES,QAAQ,CAACJ,IAAI,CAAC;IACvC,OAAOI,QAAQ,CAACJ,IAAI;EACtB;EAEA,MAAMK,GAAG,GAAGD,QAAQ,CAACJ,IAAI;;EAEzB;EACAN,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEU,GAAG,CAAC;;EAE5B;EACA,IAAIA,GAAG,CAACC,IAAI,KAAK,GAAG,EAAE;IACpB;IACAZ,OAAO,CAACO,KAAK,CAAC,SAAS,EAAE;MACvBL,GAAG,EAAEQ,QAAQ,CAACf,MAAM,CAACO,GAAG;MACxBW,UAAU,EAAEF,GAAG,CAACC,IAAI;MACpBE,OAAO,EAAEH,GAAG,CAACG,OAAO;MACpBR,IAAI,EAAEK,GAAG,CAACL;IACZ,CAAC,CAAC;IAEFrB,SAAS,CAAC;MACR6B,OAAO,EAAEH,GAAG,CAACG,OAAO,IAAI,MAAM;MAC9BC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;;IAEF;IACA,IAAIL,GAAG,CAACC,IAAI,KAAK,GAAG,IAAID,GAAG,CAACC,IAAI,KAAK,GAAG,EAAE;MACxC;MACA1B,KAAK,CAAC+B,QAAQ,CAAC,aAAa,CAAC,CAACC,IAAI,CAAC,MAAM;QACvCC,QAAQ,CAACC,MAAM,CAAC,CAAC;MACnB,CAAC,CAAC;IACJ;IACA,OAAOZ,OAAO,CAACC,MAAM,CAAC,IAAIY,KAAK,CAACV,GAAG,CAACG,OAAO,IAAI,MAAM,CAAC,CAAC;EACzD,CAAC,MAAM;IACL,OAAOH,GAAG;EACZ;AACF,CAAC,EACDJ,KAAK,IAAI;EACPP,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEM,KAAK,CAAC,CAAC,CAAC;;EAE3B;EACA,MAAML,GAAG,GAAGK,KAAK,CAACZ,MAAM,GAAGY,KAAK,CAACZ,MAAM,CAACO,GAAG,GAAG,OAAO;EACrD,MAAME,MAAM,GAAGG,KAAK,CAACZ,MAAM,GAAGY,KAAK,CAACZ,MAAM,CAACS,MAAM,GAAG,MAAM;EAC1DJ,OAAO,CAACC,GAAG,CAAC,SAASG,MAAM,CAACkB,WAAW,CAAC,CAAC,IAAIpB,GAAG,EAAE,CAAC;;EAEnD;EACA,IAAIK,KAAK,CAACG,QAAQ,EAAE;IAClBV,OAAO,CAACO,KAAK,CAAC,SAAS,EAAE;MACvBL,GAAG,EAAEA,GAAG;MACRE,MAAM,EAAEA,MAAM;MACdmB,MAAM,EAAEhB,KAAK,CAACG,QAAQ,CAACa,MAAM;MAC7BC,UAAU,EAAEjB,KAAK,CAACG,QAAQ,CAACc,UAAU;MACrCzB,OAAO,EAAEQ,KAAK,CAACG,QAAQ,CAACX,OAAO;MAC/BO,IAAI,EAAEC,KAAK,CAACG,QAAQ,CAACJ;IACvB,CAAC,CAAC;EACJ,CAAC,MAAM;IACLN,OAAO,CAACO,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACO,OAAO,CAAC;EACvC;EAEA,IAAIW,QAAQ,GAAG,MAAM;EACrB,IAAIlB,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACa,MAAM,EAAE;IAC3C,QAAQhB,KAAK,CAACG,QAAQ,CAACa,MAAM;MAC3B,KAAK,GAAG;QACNE,QAAQ,GAAG,WAAW;QACtB;QACAvC,KAAK,CAAC+B,QAAQ,CAAC,aAAa,CAAC,CAACC,IAAI,CAAC,MAAM;UACvCC,QAAQ,CAACC,MAAM,CAAC,CAAC;QACnB,CAAC,CAAC;QACF;MACF,KAAK,GAAG;QACNK,QAAQ,GAAG,MAAM;QACjB;MACF,KAAK,GAAG;QACNA,QAAQ,GAAG,UAAU;QACrB;MACF,KAAK,GAAG;QACNA,QAAQ,GAAG,SAAS;QACpB,IAAIlB,KAAK,CAACG,QAAQ,CAACJ,IAAI,IAAIC,KAAK,CAACG,QAAQ,CAACJ,IAAI,CAACQ,OAAO,EAAE;UACtDW,QAAQ,IAAI,IAAI,GAAGlB,KAAK,CAACG,QAAQ,CAACJ,IAAI,CAACQ,OAAO;QAChD,CAAC,MAAM,IAAIV,MAAM,CAACsB,WAAW,CAAC,CAAC,KAAK,KAAK,IAAIxB,GAAG,CAACyB,QAAQ,CAAC,UAAU,CAAC,EAAE;UACrEF,QAAQ,GAAG,qBAAqB;QAClC;QACA;MACF;QACEA,QAAQ,GAAGlB,KAAK,CAACO,OAAO,IAAI,MAAM;IACtC;EACF;EAEA7B,SAAS,CAAC;IACR6B,OAAO,EAAEW,QAAQ;IACjBV,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EACF,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAenB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}