{"ast":null,"code":"import { ref, reactive, onMounted, nextTick } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { getDeptTree, addDept, updateDept, deleteDept, getDeptById } from '@/api/dept';\n\n// 表格数据和状态\n\nexport default {\n  __name: 'SysDept',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const deptList = ref([]);\n    const deptTreeOptions = ref([]);\n    const loading = ref(false);\n\n    // 对话框相关\n    const dialogVisible = ref(false);\n    const dialogTitle = ref('');\n    const deptFormRef = ref(null);\n    const deptForm = reactive({\n      id: undefined,\n      parentId: 0,\n      name: '',\n      leader: '',\n      phone: '',\n      sortValue: 0,\n      status: 1\n    });\n\n    // 表单验证规则\n    const rules = {\n      name: [{\n        required: true,\n        message: '请输入部门名称',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 50,\n        message: '长度在 2 到 50 个字符',\n        trigger: 'blur'\n      }],\n      parentId: [{\n        required: true,\n        message: '请选择上级部门',\n        trigger: 'change'\n      }],\n      sortValue: [{\n        required: true,\n        message: '请输入排序',\n        trigger: 'blur'\n      }],\n      status: [{\n        required: true,\n        message: '请选择状态',\n        trigger: 'change'\n      }]\n    };\n\n    // 获取部门树\n    const getList = async () => {\n      try {\n        loading.value = true;\n\n        // 获取部门列表数据\n        const res = await getDeptTree();\n        console.log('部门列表响应:', res);\n\n        // 处理部门数据，构建树形结构\n        if (res.data && res.data.items) {\n          // 分页接口返回的是items数组\n          const depts = res.data.items || [];\n          console.log('原始部门数据:', depts);\n\n          // 构建部门树结构\n          const buildDeptTree = depts => {\n            // 创建一个映射表\n            const deptMap = {};\n            depts.forEach(dept => {\n              dept.children = []; // 初始化children数组\n              deptMap[dept.id] = dept;\n            });\n\n            // 构建树结构\n            const result = [];\n            depts.forEach(dept => {\n              if (dept.parentId && deptMap[dept.parentId]) {\n                // 如果有父节点，添加到父节点的children中\n                deptMap[dept.parentId].children.push(dept);\n              } else {\n                // 没有父节点或父节点不在列表中，作为根节点\n                result.push(dept);\n              }\n            });\n\n            // 按sortValue排序每级的子节点\n            const sortChildren = nodes => {\n              if (!nodes) return;\n              // 对子节点排序\n              nodes.sort((a, b) => (a.sortValue || 0) - (b.sortValue || 0));\n              // 递归排序每个节点的子节点\n              nodes.forEach(node => {\n                if (node.children && node.children.length > 0) {\n                  sortChildren(node.children);\n                }\n              });\n            };\n\n            // 对结果进行排序\n            sortChildren(result);\n            return result;\n          };\n\n          // 获取树形结构的部门数据\n          const treeData = buildDeptTree(depts);\n          console.log('构建的树形结构:', treeData);\n\n          // 如果树为空但原始数据不为空，可能是所有部门parentId设置不正确\n          if (treeData.length === 0 && depts.length > 0) {\n            console.warn('树构建失败，尝试将所有部门置为顶级');\n            deptList.value = depts;\n          } else {\n            deptList.value = treeData;\n          }\n        } else if (res.data && Array.isArray(res.data)) {\n          // 直接返回数组的情况\n          deptList.value = res.data;\n        } else {\n          deptList.value = [];\n          console.warn('无法识别的响应格式，使用空数组');\n        }\n\n        // 准备树形选择器数据\n        prepareDeptOptions();\n      } catch (error) {\n        console.error('获取部门列表失败', error);\n        ElMessage.error('获取部门列表失败：' + (error.message || '未知错误'));\n        deptList.value = [];\n\n        // 重置部门选项\n        deptTreeOptions.value = [{\n          id: 0,\n          name: '顶级部门',\n          parentId: -1\n        }];\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 准备部门选择器数据\n    const prepareDeptOptions = () => {\n      // 准备树形选择器数据 - 将树形结构平铺\n      const flattenDeptTree = (tree, result = []) => {\n        if (!tree || !Array.isArray(tree)) return result;\n        tree.forEach(node => {\n          if (node) {\n            // 创建新对象，避免引用问题\n            const nodeCopy = {\n              id: node.id,\n              name: node.name,\n              parentId: node.parentId,\n              leader: node.leader,\n              phone: node.phone,\n              sortValue: node.sortValue,\n              status: node.status\n            };\n            result.push(nodeCopy);\n            if (node.children && node.children.length > 0) {\n              flattenDeptTree(node.children, result);\n            }\n          }\n        });\n        return result;\n      };\n\n      // 构建选择器数据\n      deptTreeOptions.value = [{\n        id: 0,\n        name: '顶级部门',\n        parentId: -1\n      }];\n\n      // 添加已获取的部门到选项（平铺处理）\n      if (deptList.value && deptList.value.length > 0) {\n        const flatDepts = flattenDeptTree(deptList.value);\n        deptTreeOptions.value = deptTreeOptions.value.concat(flatDepts);\n      }\n    };\n\n    // 重置表单\n    const resetForm = () => {\n      deptForm.id = undefined;\n      deptForm.parentId = 0;\n      deptForm.name = '';\n      deptForm.leader = '';\n      deptForm.phone = '';\n      deptForm.sortValue = 0;\n      deptForm.status = 1;\n      nextTick(() => {\n        deptFormRef.value?.resetFields();\n      });\n    };\n\n    // 新增部门\n    const handleAdd = () => {\n      resetForm();\n      dialogTitle.value = '新增部门';\n      dialogVisible.value = true;\n    };\n\n    // 编辑部门\n    const handleEdit = async row => {\n      resetForm();\n      dialogTitle.value = '编辑部门';\n      dialogVisible.value = true;\n\n      // 获取最新的部门信息\n      try {\n        const res = await getDeptById(row.id);\n        if (res.data) {\n          // 填充表单数据\n          Object.assign(deptForm, res.data);\n        }\n      } catch (error) {\n        ElMessage.error('获取部门信息失败');\n      }\n    };\n\n    // 删除部门\n    const handleDelete = row => {\n      ElMessageBox.confirm(`确定要删除部门 ${row.name} 吗?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await deleteDept(row.id);\n          ElMessage.success('删除成功');\n          getList();\n        } catch (error) {\n          ElMessage.error('删除失败');\n        }\n      }).catch(() => {});\n    };\n\n    // 取消表单\n    const cancelForm = () => {\n      dialogVisible.value = false;\n      resetForm();\n    };\n\n    // 提交表单\n    const submitForm = async () => {\n      deptFormRef.value.validate(async valid => {\n        if (valid) {\n          try {\n            if (deptForm.id) {\n              // 编辑部门\n              await updateDept(deptForm);\n              ElMessage.success('修改部门成功');\n            } else {\n              // 新增部门\n              await addDept(deptForm);\n              ElMessage.success('新增部门成功');\n            }\n            dialogVisible.value = false;\n            getList();\n          } catch (error) {\n            console.error('操作失败', error);\n            ElMessage.error('操作失败，请稍后重试');\n          }\n        }\n      });\n    };\n\n    // 页面加载时获取数据\n    onMounted(() => {\n      getList();\n    });\n    const __returned__ = {\n      deptList,\n      deptTreeOptions,\n      loading,\n      dialogVisible,\n      dialogTitle,\n      deptFormRef,\n      deptForm,\n      rules,\n      getList,\n      prepareDeptOptions,\n      resetForm,\n      handleAdd,\n      handleEdit,\n      handleDelete,\n      cancelForm,\n      submitForm,\n      ref,\n      reactive,\n      onMounted,\n      nextTick,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get getDeptTree() {\n        return getDeptTree;\n      },\n      get addDept() {\n        return addDept;\n      },\n      get updateDept() {\n        return updateDept;\n      },\n      get deleteDept() {\n        return deleteDept;\n      },\n      get getDeptById() {\n        return getDeptById;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","nextTick","ElMessage","ElMessageBox","getDeptTree","addDept","updateDept","deleteDept","getDeptById","deptList","deptTreeOptions","loading","dialogVisible","dialogTitle","deptFormRef","deptForm","id","undefined","parentId","name","leader","phone","sortValue","status","rules","required","message","trigger","min","max","getList","value","res","console","log","data","items","depts","buildDeptTree","deptMap","forEach","dept","children","result","push","sortChildren","nodes","sort","a","b","node","length","treeData","warn","Array","isArray","prepareDeptOptions","error","flattenDeptTree","tree","nodeCopy","flatDepts","concat","resetForm","resetFields","handleAdd","handleEdit","row","Object","assign","handleDelete","confirm","confirmButtonText","cancelButtonText","type","then","success","catch","cancelForm","submitForm","validate","valid"],"sources":["/Users/apple/Desktop/111111/zongheshixi/daijiaguanli/frontui/src/pages/system/SysDept.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-card>\n      <template #header>\n        <div class=\"card-header\">\n          <span>部门管理</span>\n          <el-button type=\"primary\" @click=\"handleAdd\">新增部门</el-button>\n        </div>\n      </template>\n      \n      <el-table v-loading=\"loading\" :data=\"deptList\" row-key=\"id\" border :tree-props=\"{ children: 'children' }\" :default-expand-all=\"true\">\n        <el-table-column prop=\"name\" label=\"部门名称\" />\n        <el-table-column prop=\"leader\" label=\"负责人\" />\n        <el-table-column prop=\"phone\" label=\"联系电话\" />\n        <el-table-column prop=\"email\" label=\"邮箱\" />\n        <el-table-column prop=\"sortValue\" label=\"排序\" width=\"80\" />\n        <el-table-column prop=\"status\" label=\"状态\" width=\"80\">\n          <template #default=\"scope\">\n            <el-tag :type=\"scope.row.status === 1 ? 'success' : 'danger'\">\n              {{ scope.row.status === 1 ? '正常' : '停用' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"200\">\n          <template #default=\"scope\">\n            <el-button type=\"primary\" link @click=\"handleEdit(scope.row)\">编辑</el-button>\n            <el-button type=\"danger\" link @click=\"handleDelete(scope.row)\">删除</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n\n    <!-- 添加/编辑部门对话框 -->\n    <el-dialog \n      :title=\"dialogTitle\" \n      v-model=\"dialogVisible\" \n      width=\"500px\" \n      append-to-body\n      :close-on-click-modal=\"false\"\n    >\n      <el-form \n        ref=\"deptFormRef\" \n        :model=\"deptForm\" \n        :rules=\"rules\" \n        label-width=\"80px\"\n      >\n        <el-form-item label=\"上级部门\" prop=\"parentId\">\n          <el-tree-select\n            v-model=\"deptForm.parentId\"\n            :data=\"deptTreeOptions\"\n            :render-after-expand=\"false\"\n            node-key=\"id\"\n            :props=\"{ label: 'name', value: 'id', children: 'children' }\"\n            placeholder=\"请选择上级部门\"\n            check-strictly\n            clearable\n          />\n        </el-form-item>\n        <el-form-item label=\"部门名称\" prop=\"name\">\n          <el-input v-model=\"deptForm.name\" placeholder=\"请输入部门名称\" />\n        </el-form-item>\n        <el-form-item label=\"负责人\" prop=\"leader\">\n          <el-input v-model=\"deptForm.leader\" placeholder=\"请输入负责人\" />\n        </el-form-item>\n        <el-form-item label=\"联系电话\" prop=\"phone\">\n          <el-input v-model=\"deptForm.phone\" placeholder=\"请输入联系电话\" />\n        </el-form-item>\n        <el-form-item label=\"排序\" prop=\"sortValue\">\n          <el-input-number v-model=\"deptForm.sortValue\" :min=\"0\" :max=\"999\" controls-position=\"right\" />\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"status\">\n          <el-radio-group v-model=\"deptForm.status\">\n            <el-radio :label=\"1\">正常</el-radio>\n            <el-radio :label=\"0\">停用</el-radio>\n          </el-radio-group>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <div class=\"dialog-footer\">\n          <el-button @click=\"cancelForm\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted, nextTick } from 'vue'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { getDeptTree, addDept, updateDept, deleteDept, getDeptById } from '@/api/dept'\n\n// 表格数据和状态\nconst deptList = ref([])\nconst deptTreeOptions = ref([])\nconst loading = ref(false)\n\n// 对话框相关\nconst dialogVisible = ref(false)\nconst dialogTitle = ref('')\nconst deptFormRef = ref(null)\nconst deptForm = reactive({\n  id: undefined,\n  parentId: 0,\n  name: '',\n  leader: '',\n  phone: '',\n  sortValue: 0,\n  status: 1\n})\n\n// 表单验证规则\nconst rules = {\n  name: [\n    { required: true, message: '请输入部门名称', trigger: 'blur' },\n    { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }\n  ],\n  parentId: [\n    { required: true, message: '请选择上级部门', trigger: 'change' }\n  ],\n  sortValue: [\n    { required: true, message: '请输入排序', trigger: 'blur' }\n  ],\n  status: [\n    { required: true, message: '请选择状态', trigger: 'change' }\n  ]\n}\n\n// 获取部门树\nconst getList = async () => {\n  try {\n    loading.value = true\n    \n    // 获取部门列表数据\n    const res = await getDeptTree()\n    console.log('部门列表响应:', res)\n    \n    // 处理部门数据，构建树形结构\n    if (res.data && res.data.items) {\n      // 分页接口返回的是items数组\n      const depts = res.data.items || []\n      console.log('原始部门数据:', depts)\n      \n      // 构建部门树结构\n      const buildDeptTree = (depts) => {\n        // 创建一个映射表\n        const deptMap = {}\n        depts.forEach(dept => {\n          dept.children = [] // 初始化children数组\n          deptMap[dept.id] = dept\n        })\n        \n        // 构建树结构\n        const result = []\n        depts.forEach(dept => {\n          if (dept.parentId && deptMap[dept.parentId]) {\n            // 如果有父节点，添加到父节点的children中\n            deptMap[dept.parentId].children.push(dept)\n          } else {\n            // 没有父节点或父节点不在列表中，作为根节点\n            result.push(dept)\n          }\n        })\n        \n        // 按sortValue排序每级的子节点\n        const sortChildren = (nodes) => {\n          if (!nodes) return\n          // 对子节点排序\n          nodes.sort((a, b) => (a.sortValue || 0) - (b.sortValue || 0))\n          // 递归排序每个节点的子节点\n          nodes.forEach(node => {\n            if (node.children && node.children.length > 0) {\n              sortChildren(node.children)\n            }\n          })\n        }\n        \n        // 对结果进行排序\n        sortChildren(result)\n        \n        return result\n      }\n      \n      // 获取树形结构的部门数据\n      const treeData = buildDeptTree(depts)\n      console.log('构建的树形结构:', treeData)\n      \n      // 如果树为空但原始数据不为空，可能是所有部门parentId设置不正确\n      if (treeData.length === 0 && depts.length > 0) {\n        console.warn('树构建失败，尝试将所有部门置为顶级')\n        deptList.value = depts\n      } else {\n        deptList.value = treeData\n      }\n    } else if (res.data && Array.isArray(res.data)) {\n      // 直接返回数组的情况\n      deptList.value = res.data\n    } else {\n      deptList.value = []\n      console.warn('无法识别的响应格式，使用空数组')\n    }\n    \n    // 准备树形选择器数据\n    prepareDeptOptions()\n  } catch (error) {\n    console.error('获取部门列表失败', error)\n    ElMessage.error('获取部门列表失败：' + (error.message || '未知错误'))\n    deptList.value = []\n    \n    // 重置部门选项\n    deptTreeOptions.value = [{ id: 0, name: '顶级部门', parentId: -1 }]\n  } finally {\n    loading.value = false\n  }\n}\n\n// 准备部门选择器数据\nconst prepareDeptOptions = () => {\n  // 准备树形选择器数据 - 将树形结构平铺\n  const flattenDeptTree = (tree, result = []) => {\n    if (!tree || !Array.isArray(tree)) return result\n    \n    tree.forEach(node => {\n      if (node) {\n        // 创建新对象，避免引用问题\n        const nodeCopy = {\n          id: node.id,\n          name: node.name,\n          parentId: node.parentId,\n          leader: node.leader,\n          phone: node.phone,\n          sortValue: node.sortValue,\n          status: node.status\n        }\n        \n        result.push(nodeCopy)\n        if (node.children && node.children.length > 0) {\n          flattenDeptTree(node.children, result)\n        }\n      }\n    })\n    \n    return result\n  }\n  \n  // 构建选择器数据\n  deptTreeOptions.value = [{ id: 0, name: '顶级部门', parentId: -1 }]\n  \n  // 添加已获取的部门到选项（平铺处理）\n  if (deptList.value && deptList.value.length > 0) {\n    const flatDepts = flattenDeptTree(deptList.value)\n    deptTreeOptions.value = deptTreeOptions.value.concat(flatDepts)\n  }\n}\n\n// 重置表单\nconst resetForm = () => {\n  deptForm.id = undefined\n  deptForm.parentId = 0\n  deptForm.name = ''\n  deptForm.leader = ''\n  deptForm.phone = ''\n  deptForm.sortValue = 0\n  deptForm.status = 1\n  nextTick(() => {\n    deptFormRef.value?.resetFields()\n  })\n}\n\n// 新增部门\nconst handleAdd = () => {\n  resetForm()\n  dialogTitle.value = '新增部门'\n  dialogVisible.value = true\n}\n\n// 编辑部门\nconst handleEdit = async (row) => {\n  resetForm()\n  dialogTitle.value = '编辑部门'\n  dialogVisible.value = true\n  \n  // 获取最新的部门信息\n  try {\n    const res = await getDeptById(row.id)\n    if (res.data) {\n      // 填充表单数据\n      Object.assign(deptForm, res.data)\n    }\n  } catch (error) {\n    ElMessage.error('获取部门信息失败')\n  }\n}\n\n// 删除部门\nconst handleDelete = (row) => {\n  ElMessageBox.confirm(`确定要删除部门 ${row.name} 吗?`, '提示', {\n    confirmButtonText: '确定',\n    cancelButtonText: '取消',\n    type: 'warning'\n  }).then(async () => {\n    try {\n      await deleteDept(row.id)\n      ElMessage.success('删除成功')\n      getList()\n    } catch (error) {\n      ElMessage.error('删除失败')\n    }\n  }).catch(() => {})\n}\n\n// 取消表单\nconst cancelForm = () => {\n  dialogVisible.value = false\n  resetForm()\n}\n\n// 提交表单\nconst submitForm = async () => {\n  deptFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        if (deptForm.id) {\n          // 编辑部门\n          await updateDept(deptForm)\n          ElMessage.success('修改部门成功')\n        } else {\n          // 新增部门\n          await addDept(deptForm)\n          ElMessage.success('新增部门成功')\n        }\n        dialogVisible.value = false\n        getList()\n      } catch (error) {\n        console.error('操作失败', error)\n        ElMessage.error('操作失败，请稍后重试')\n      }\n    }\n  })\n}\n\n// 页面加载时获取数据\nonMounted(() => {\n  getList()\n})\n</script>\n\n<style scoped>\n.app-container {\n  padding: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}