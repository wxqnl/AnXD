{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { getAllUsers, updateUser, deleteUser, getUserById, getUserLoginLog, getUserOperLog } from '@/api/user';\nimport { getDeptTree } from '@/api/dept';\nimport { getPostList } from '@/api/post';\n\n// 查询参数\n\nexport default {\n  __name: 'SysUser',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const queryParams = reactive({\n      pageNum: 1,\n      pageSize: 10,\n      username: undefined,\n      name: undefined,\n      phone: undefined,\n      deptId: undefined,\n      postId: undefined,\n      status: undefined,\n      deptName: undefined,\n      postName: undefined\n    });\n\n    // 表格数据和加载状态\n    const userList = ref([]);\n    const loading = ref(false);\n    const total = ref(0);\n\n    // 部门和岗位选项\n    const deptOptions = ref([]);\n    const postOptions = ref([]);\n\n    // 编辑对话框相关\n    const dialogVisible = ref(false);\n    const userFormRef = ref(null);\n    const userForm = reactive({\n      id: '',\n      username: '',\n      name: '',\n      phone: '',\n      deptId: undefined,\n      postId: undefined,\n      status: 1,\n      description: ''\n    });\n\n    // 登录日志相关\n    const loginLogDialogVisible = ref(false);\n    const loginLogList = ref([]);\n    const loginLogTotal = ref(0);\n    const logLoading = ref(false);\n    const loginLogQuery = reactive({\n      pageNum: 1,\n      pageSize: 10,\n      username: '',\n      minAccessTime: undefined,\n      maxAccessTime: undefined\n    });\n\n    // 操作日志相关\n    const operLogDialogVisible = ref(false);\n    const operLogList = ref([]);\n    const operLogTotal = ref(0);\n    const operLogLoading = ref(false);\n    const operLogQuery = reactive({\n      pageNum: 1,\n      pageSize: 10,\n      operName: '',\n      deptName: '',\n      status: undefined,\n      operatorType: undefined,\n      businessType: undefined,\n      requestMethod: undefined,\n      minOperTime: undefined,\n      maxOperTime: undefined\n    });\n\n    // 表单验证规则\n    const rules = {\n      name: [{\n        required: true,\n        message: '请输入姓名',\n        trigger: 'blur'\n      }],\n      phone: [{\n        required: true,\n        message: '请输入手机号',\n        trigger: 'blur'\n      }, {\n        pattern: /^1[3-9]\\d{9}$/,\n        message: '请输入正确的手机号',\n        trigger: 'blur'\n      }]\n    };\n\n    // 查询用户列表\n    const getList = async () => {\n      try {\n        loading.value = true;\n        const res = await getAllUsers(queryParams);\n        console.log('用户列表响应:', res);\n        userList.value = res.data.items || [];\n        total.value = res.data.total || 0;\n      } catch (error) {\n        console.error('获取用户列表失败', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 查询按钮\n    const handleQuery = () => {\n      queryParams.pageNum = 1;\n      getList();\n    };\n\n    // 重置查询\n    const resetQuery = () => {\n      // 重置查询表单\n      queryParams.username = undefined;\n      queryParams.name = undefined;\n      queryParams.phone = undefined;\n      queryParams.deptName = undefined;\n      queryParams.pageNum = 1;\n      getList();\n    };\n\n    // 编辑用户\n    const handleEdit = async row => {\n      // 填充表单数据\n      Object.keys(userForm).forEach(key => {\n        if (row[key] !== undefined) {\n          userForm[key] = row[key];\n        }\n      });\n\n      // 显示对话框\n      dialogVisible.value = true;\n\n      // 获取部门和岗位选项\n      try {\n        await Promise.all([getDeptOptions(), getPostOptions()]);\n      } catch (error) {\n        console.error('获取选项数据失败', error);\n        // 即使获取选项失败也继续显示对话框\n      }\n    };\n\n    // 删除用户\n    const handleDelete = row => {\n      ElMessageBox.confirm(`确定要删除用户 ${row.username} 吗?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await deleteUser(row.id);\n          ElMessage.success('删除成功');\n          getList();\n        } catch (error) {\n          ElMessage.error('删除失败');\n        }\n      }).catch(() => {});\n    };\n\n    // 获取部门选项\n    const getDeptOptions = async () => {\n      try {\n        const res = await getDeptTree();\n        console.log('获取部门选项响应:', res);\n\n        // 处理不同的数据格式\n        if (res.data && res.data.items) {\n          // 如果是分页格式\n          deptOptions.value = flattenDeptTree(buildDeptTree(res.data.items));\n        } else if (res.data && Array.isArray(res.data)) {\n          // 如果直接是数组格式\n          deptOptions.value = flattenDeptTree(res.data);\n        } else {\n          console.warn('未识别的部门数据格式');\n          deptOptions.value = [];\n        }\n      } catch (error) {\n        console.error('获取部门选项失败', error);\n        ElMessage.warning('获取部门选项失败，请稍后再试');\n        deptOptions.value = [];\n      }\n    };\n\n    // 构建部门树结构\n    const buildDeptTree = depts => {\n      // 创建映射表\n      const deptMap = {};\n      depts.forEach(dept => {\n        dept.children = [];\n        deptMap[dept.id] = dept;\n      });\n\n      // 构建树结构\n      const result = [];\n      depts.forEach(dept => {\n        if (dept.parentId && deptMap[dept.parentId]) {\n          deptMap[dept.parentId].children.push(dept);\n        } else {\n          result.push(dept);\n        }\n      });\n      return result;\n    };\n\n    // 扁平化部门树结构\n    const flattenDeptTree = deptTree => {\n      if (!deptTree || !Array.isArray(deptTree)) {\n        console.warn('部门树结构无效', deptTree);\n        return [];\n      }\n      const result = [];\n      const flatten = items => {\n        items.forEach(item => {\n          if (item && item.id) {\n            result.push({\n              id: item.id,\n              name: item.name\n            });\n            if (item.children && item.children.length > 0) {\n              flatten(item.children);\n            }\n          }\n        });\n      };\n      flatten(deptTree);\n      return result;\n    };\n\n    // 获取岗位选项\n    const getPostOptions = async () => {\n      try {\n        // 使用默认的分页参数\n        const params = {\n          pageSize: 100,\n          pageNum: 1\n        };\n        const res = await getPostList(params);\n        console.log('获取岗位选项响应:', res);\n\n        // 处理不同的数据格式\n        if (res.data && res.data.items) {\n          // 分页格式\n          postOptions.value = (res.data.items || []).map(item => ({\n            id: item.id,\n            name: item.name\n          }));\n        } else if (res.data && Array.isArray(res.data)) {\n          // 直接是数组格式\n          postOptions.value = res.data.map(item => ({\n            id: item.id,\n            name: item.name\n          }));\n        } else {\n          console.warn('未识别的岗位数据格式');\n          postOptions.value = [];\n        }\n      } catch (error) {\n        console.error('获取岗位选项失败', error);\n        ElMessage.warning('获取岗位选项失败，请稍后再试');\n        postOptions.value = [];\n      }\n    };\n\n    // 提交表单\n    const submitForm = () => {\n      userFormRef.value.validate(async valid => {\n        if (valid) {\n          try {\n            await updateUser(userForm);\n            ElMessage.success('更新成功');\n            dialogVisible.value = false;\n            getList();\n          } catch (error) {\n            ElMessage.error('更新失败');\n          }\n        }\n      });\n    };\n\n    // 分页操作\n    const handleSizeChange = size => {\n      queryParams.pageSize = size;\n      getList();\n    };\n    const handleCurrentChange = page => {\n      queryParams.pageNum = page;\n      getList();\n    };\n\n    // 查看登录日志\n    const viewLoginLog = async row => {\n      loginLogDialogVisible.value = true;\n      loginLogQuery.username = row.username;\n      getLoginLogList();\n    };\n\n    // 获取登录日志列表\n    const getLoginLogList = async () => {\n      try {\n        logLoading.value = true;\n        const res = await getUserLoginLog(loginLogQuery);\n        console.log('登录日志响应:', res);\n        loginLogList.value = res.data.items || [];\n        loginLogTotal.value = res.data.total || 0;\n      } catch (error) {\n        console.error('获取登录日志失败', error);\n        loginLogList.value = [];\n        loginLogTotal.value = 0;\n      } finally {\n        logLoading.value = false;\n      }\n    };\n\n    // 登录日志分页操作\n    const handleLogSizeChange = size => {\n      loginLogQuery.pageSize = size;\n      getLoginLogList();\n    };\n    const handleLogCurrentChange = page => {\n      loginLogQuery.pageNum = page;\n      getLoginLogList();\n    };\n\n    // 查看操作日志\n    const viewOperLog = async row => {\n      operLogDialogVisible.value = true;\n      operLogQuery.operName = row.username;\n      getOperLogList();\n    };\n\n    // 获取操作日志列表\n    const getOperLogList = async () => {\n      try {\n        operLogLoading.value = true;\n        const res = await getUserOperLog(operLogQuery);\n        console.log('操作日志响应:', res);\n        operLogList.value = res.data.items || [];\n        operLogTotal.value = res.data.total || 0;\n      } catch (error) {\n        console.error('获取操作日志失败', error);\n        operLogList.value = [];\n        operLogTotal.value = 0;\n      } finally {\n        operLogLoading.value = false;\n      }\n    };\n\n    // 操作日志分页操作\n    const handleOperLogSizeChange = size => {\n      operLogQuery.pageSize = size;\n      getOperLogList();\n    };\n    const handleOperLogCurrentChange = page => {\n      operLogQuery.pageNum = page;\n      getOperLogList();\n    };\n\n    // 页面加载时获取数据\n    onMounted(() => {\n      getList();\n    });\n    const __returned__ = {\n      queryParams,\n      userList,\n      loading,\n      total,\n      deptOptions,\n      postOptions,\n      dialogVisible,\n      userFormRef,\n      userForm,\n      loginLogDialogVisible,\n      loginLogList,\n      loginLogTotal,\n      logLoading,\n      loginLogQuery,\n      operLogDialogVisible,\n      operLogList,\n      operLogTotal,\n      operLogLoading,\n      operLogQuery,\n      rules,\n      getList,\n      handleQuery,\n      resetQuery,\n      handleEdit,\n      handleDelete,\n      getDeptOptions,\n      buildDeptTree,\n      flattenDeptTree,\n      getPostOptions,\n      submitForm,\n      handleSizeChange,\n      handleCurrentChange,\n      viewLoginLog,\n      getLoginLogList,\n      handleLogSizeChange,\n      handleLogCurrentChange,\n      viewOperLog,\n      getOperLogList,\n      handleOperLogSizeChange,\n      handleOperLogCurrentChange,\n      ref,\n      reactive,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get getAllUsers() {\n        return getAllUsers;\n      },\n      get updateUser() {\n        return updateUser;\n      },\n      get deleteUser() {\n        return deleteUser;\n      },\n      get getUserById() {\n        return getUserById;\n      },\n      get getUserLoginLog() {\n        return getUserLoginLog;\n      },\n      get getUserOperLog() {\n        return getUserOperLog;\n      },\n      get getDeptTree() {\n        return getDeptTree;\n      },\n      get getPostList() {\n        return getPostList;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","ElMessage","ElMessageBox","getAllUsers","updateUser","deleteUser","getUserById","getUserLoginLog","getUserOperLog","getDeptTree","getPostList","queryParams","pageNum","pageSize","username","undefined","name","phone","deptId","postId","status","deptName","postName","userList","loading","total","deptOptions","postOptions","dialogVisible","userFormRef","userForm","id","description","loginLogDialogVisible","loginLogList","loginLogTotal","logLoading","loginLogQuery","minAccessTime","maxAccessTime","operLogDialogVisible","operLogList","operLogTotal","operLogLoading","operLogQuery","operName","operatorType","businessType","requestMethod","minOperTime","maxOperTime","rules","required","message","trigger","pattern","getList","value","res","console","log","data","items","error","handleQuery","resetQuery","handleEdit","row","Object","keys","forEach","key","Promise","all","getDeptOptions","getPostOptions","handleDelete","confirm","confirmButtonText","cancelButtonText","type","then","success","catch","flattenDeptTree","buildDeptTree","Array","isArray","warn","warning","depts","deptMap","dept","children","result","parentId","push","deptTree","flatten","item","length","params","map","submitForm","validate","valid","handleSizeChange","size","handleCurrentChange","page","viewLoginLog","getLoginLogList","handleLogSizeChange","handleLogCurrentChange","viewOperLog","getOperLogList","handleOperLogSizeChange","handleOperLogCurrentChange"],"sources":["/Users/apple/Desktop/111111/zongheshixi/daijiaguanli/frontui/src/pages/system/SysUser.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!-- 搜索区域 -->\n    <el-card class=\"search-card\">\n      <el-form :model=\"queryParams\" ref=\"queryForm\" :inline=\"true\" class=\"search-form\">\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"queryParams.username\" placeholder=\"请输入用户名\" clearable />\n        </el-form-item>\n        <el-form-item label=\"姓名\" prop=\"name\">\n          <el-input v-model=\"queryParams.name\" placeholder=\"请输入姓名\" clearable />\n        </el-form-item>\n        <el-form-item label=\"手机号\" prop=\"phone\">\n          <el-input v-model=\"queryParams.phone\" placeholder=\"请输入手机号\" clearable />\n        </el-form-item>\n        <el-form-item label=\"部门\" prop=\"deptName\">\n          <el-input v-model=\"queryParams.deptName\" placeholder=\"请输入部门\" clearable />\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleQuery\">查询</el-button>\n          <el-button @click=\"resetQuery\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n    <!-- 表格工具栏 -->\n    <el-card>\n      <template #header>\n        <div class=\"card-header\">\n          <span>用户列表</span>\n        </div>\n      </template>\n\n      <!-- 表格区域 -->\n      <el-table v-loading=\"loading\" :data=\"userList\" border>\n        <el-table-column type=\"index\" label=\"#\" width=\"50\" />\n        <el-table-column prop=\"username\" label=\"用户名\" />\n        <el-table-column prop=\"name\" label=\"姓名\" />\n        <el-table-column prop=\"gender\" label=\"性别\">\n          <template #default=\"scope\">\n            {{ scope.row.gender === 1 ? '男' : scope.row.gender === 2 ? '女' : '未知' }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"phone\" label=\"手机号\" />\n        <el-table-column prop=\"deptName\" label=\"部门\" />\n        <el-table-column prop=\"postName\" label=\"岗位\" />\n        <el-table-column prop=\"status\" label=\"状态\">\n          <template #default=\"scope\">\n            <el-tag :type=\"scope.row.status === 1 ? 'success' : 'danger'\">\n              {{ scope.row.status === 1 ? '正常' : '停用' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"350\">\n          <template #default=\"scope\">\n            <el-button type=\"primary\" link @click=\"handleEdit(scope.row)\">编辑</el-button>\n            <el-button type=\"danger\" link @click=\"handleDelete(scope.row)\">删除</el-button>\n            <el-button type=\"info\" link @click=\"viewLoginLog(scope.row)\">登录日志</el-button>\n            <el-button type=\"warning\" link @click=\"viewOperLog(scope.row)\">操作日志</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页区域 -->\n      <el-pagination\n        v-if=\"total > 0\"\n        v-model:current-page=\"queryParams.pageNum\"\n        v-model:page-size=\"queryParams.pageSize\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"total\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n      />\n    </el-card>\n    \n    <!-- 用户编辑对话框 -->\n    <el-dialog title=\"编辑用户\" v-model=\"dialogVisible\" width=\"500px\">\n      <el-form ref=\"userFormRef\" :model=\"userForm\" :rules=\"rules\" label-width=\"80px\">\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"userForm.username\" placeholder=\"请输入用户名\" disabled />\n        </el-form-item>\n        <el-form-item label=\"姓名\" prop=\"name\">\n          <el-input v-model=\"userForm.name\" placeholder=\"请输入姓名\" />\n        </el-form-item>\n        <el-form-item label=\"手机号\" prop=\"phone\">\n          <el-input v-model=\"userForm.phone\" placeholder=\"请输入手机号\" />\n        </el-form-item>\n        <el-form-item label=\"部门\" prop=\"deptId\">\n          <el-select v-model=\"userForm.deptId\" placeholder=\"请选择部门\">\n            <el-option v-for=\"dept in deptOptions\" :key=\"dept.id\" :label=\"dept.name\" :value=\"dept.id\" />\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"岗位\" prop=\"postId\">\n          <el-select v-model=\"userForm.postId\" placeholder=\"请选择岗位\">\n            <el-option v-for=\"post in postOptions\" :key=\"post.id\" :label=\"post.name\" :value=\"post.id\" />\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"status\">\n          <el-radio-group v-model=\"userForm.status\">\n            <el-radio :label=\"1\">正常</el-radio>\n            <el-radio :label=\"0\">禁用</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"描述\" prop=\"description\">\n          <el-input v-model=\"userForm.description\" type=\"textarea\" placeholder=\"请输入描述\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <div class=\"dialog-footer\">\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\">确定</el-button>\n        </div>\n      </template>\n    </el-dialog>\n\n    <!-- 登录日志对话框 -->\n    <el-dialog title=\"用户登录日志\" v-model=\"loginLogDialogVisible\" width=\"800px\">\n      <el-table v-loading=\"logLoading\" :data=\"loginLogList\" border>\n        <el-table-column type=\"index\" label=\"#\" width=\"50\" />\n        <el-table-column prop=\"username\" label=\"用户名\" width=\"120\" />\n        <el-table-column prop=\"ipaddr\" label=\"IP地址\" width=\"150\" />\n        <el-table-column prop=\"status\" label=\"状态\" width=\"80\">\n          <template #default=\"scope\">\n            <el-tag :type=\"scope.row.status === 0 ? 'success' : 'danger'\">\n              {{ scope.row.status === 0 ? '成功' : '失败' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"msg\" label=\"消息\" />\n        <el-table-column prop=\"accessTime\" label=\"访问时间\" width=\"180\" />\n      </el-table>\n      <!-- 登录日志分页区域 -->\n      <el-pagination\n        v-if=\"loginLogTotal > 0\"\n        v-model:current-page=\"loginLogQuery.pageNum\"\n        v-model:page-size=\"loginLogQuery.pageSize\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"loginLogTotal\"\n        @size-change=\"handleLogSizeChange\"\n        @current-change=\"handleLogCurrentChange\"\n        class=\"pagination\"\n      />\n    </el-dialog>\n\n    <!-- 操作日志对话框 -->\n    <el-dialog title=\"用户操作日志\" v-model=\"operLogDialogVisible\" width=\"900px\">\n      <el-table v-loading=\"operLogLoading\" :data=\"operLogList\" border>\n        <el-table-column type=\"index\" label=\"#\" width=\"50\" />\n        <el-table-column prop=\"operName\" label=\"操作人\" width=\"120\" />\n        <el-table-column prop=\"deptName\" label=\"部门\" width=\"120\" />\n        <el-table-column prop=\"businessType\" label=\"业务类型\" width=\"100\" />\n        <el-table-column prop=\"operatorType\" label=\"操作类型\" width=\"100\" />\n        <el-table-column prop=\"method\" label=\"请求方法\" width=\"120\" />\n        <el-table-column prop=\"requestMethod\" label=\"HTTP方法\" width=\"100\" />\n        <el-table-column prop=\"status\" label=\"状态\" width=\"80\">\n          <template #default=\"scope\">\n            <el-tag :type=\"scope.row.status === 0 ? 'success' : 'danger'\">\n              {{ scope.row.status === 0 ? '成功' : '失败' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"operTime\" label=\"操作时间\" width=\"180\" />\n      </el-table>\n      <!-- 操作日志分页区域 -->\n      <el-pagination\n        v-if=\"operLogTotal > 0\"\n        v-model:current-page=\"operLogQuery.pageNum\"\n        v-model:page-size=\"operLogQuery.pageSize\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"operLogTotal\"\n        @size-change=\"handleOperLogSizeChange\"\n        @current-change=\"handleOperLogCurrentChange\"\n        class=\"pagination\"\n      />\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from 'vue'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { getAllUsers, updateUser, deleteUser, getUserById, getUserLoginLog, getUserOperLog } from '@/api/user'\nimport { getDeptTree } from '@/api/dept'\nimport { getPostList } from '@/api/post'\n\n// 查询参数\nconst queryParams = reactive({\n  pageNum: 1,\n  pageSize: 10,\n  username: undefined,\n  name: undefined,\n  phone: undefined,\n  deptId: undefined,\n  postId: undefined,\n  status: undefined,\n  deptName: undefined,\n  postName: undefined,\n})\n\n// 表格数据和加载状态\nconst userList = ref([])\nconst loading = ref(false)\nconst total = ref(0)\n\n// 部门和岗位选项\nconst deptOptions = ref([])\nconst postOptions = ref([])\n\n// 编辑对话框相关\nconst dialogVisible = ref(false)\nconst userFormRef = ref(null)\nconst userForm = reactive({\n  id: '',\n  username: '',\n  name: '',\n  phone: '',\n  deptId: undefined,\n  postId: undefined,\n  status: 1,\n  description: ''\n})\n\n// 登录日志相关\nconst loginLogDialogVisible = ref(false)\nconst loginLogList = ref([])\nconst loginLogTotal = ref(0)\nconst logLoading = ref(false)\nconst loginLogQuery = reactive({\n  pageNum: 1,\n  pageSize: 10,\n  username: '',\n  minAccessTime: undefined,\n  maxAccessTime: undefined\n})\n\n// 操作日志相关\nconst operLogDialogVisible = ref(false)\nconst operLogList = ref([])\nconst operLogTotal = ref(0)\nconst operLogLoading = ref(false)\nconst operLogQuery = reactive({\n  pageNum: 1,\n  pageSize: 10,\n  operName: '',\n  deptName: '',\n  status: undefined,\n  operatorType: undefined,\n  businessType: undefined,\n  requestMethod: undefined,\n  minOperTime: undefined,\n  maxOperTime: undefined\n})\n\n// 表单验证规则\nconst rules = {\n  name: [\n    { required: true, message: '请输入姓名', trigger: 'blur' }\n  ],\n  phone: [\n    { required: true, message: '请输入手机号', trigger: 'blur' },\n    { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号', trigger: 'blur' }\n  ]\n}\n\n// 查询用户列表\nconst getList = async () => {\n  try {\n    loading.value = true\n    const res = await getAllUsers(queryParams)\n    console.log('用户列表响应:', res)\n    userList.value = res.data.items || []\n    total.value = res.data.total || 0\n  } catch (error) {\n    console.error('获取用户列表失败', error)\n  } finally {\n    loading.value = false\n  }\n}\n\n// 查询按钮\nconst handleQuery = () => {\n  queryParams.pageNum = 1\n  getList()\n}\n\n// 重置查询\nconst resetQuery = () => {\n  // 重置查询表单\n  queryParams.username = undefined\n  queryParams.name = undefined\n  queryParams.phone = undefined\n  queryParams.deptName = undefined\n  queryParams.pageNum = 1\n  getList()\n}\n\n// 编辑用户\nconst handleEdit = async (row) => {\n  // 填充表单数据\n  Object.keys(userForm).forEach(key => {\n    if (row[key] !== undefined) {\n      userForm[key] = row[key]\n    }\n  })\n  \n  // 显示对话框\n  dialogVisible.value = true\n  \n  // 获取部门和岗位选项\n  try {\n    await Promise.all([\n      getDeptOptions(),\n      getPostOptions()\n    ])\n  } catch (error) {\n    console.error('获取选项数据失败', error)\n    // 即使获取选项失败也继续显示对话框\n  }\n}\n\n// 删除用户\nconst handleDelete = (row) => {\n  ElMessageBox.confirm(`确定要删除用户 ${row.username} 吗?`, '提示', {\n    confirmButtonText: '确定',\n    cancelButtonText: '取消',\n    type: 'warning'\n  }).then(async () => {\n    try {\n      await deleteUser(row.id)\n      ElMessage.success('删除成功')\n      getList()\n    } catch (error) {\n      ElMessage.error('删除失败')\n    }\n  }).catch(() => {})\n}\n\n// 获取部门选项\nconst getDeptOptions = async () => {\n  try {\n    const res = await getDeptTree()\n    console.log('获取部门选项响应:', res)\n    \n    // 处理不同的数据格式\n    if (res.data && res.data.items) {\n      // 如果是分页格式\n      deptOptions.value = flattenDeptTree(buildDeptTree(res.data.items))\n    } else if (res.data && Array.isArray(res.data)) {\n      // 如果直接是数组格式\n      deptOptions.value = flattenDeptTree(res.data)\n    } else {\n      console.warn('未识别的部门数据格式')\n      deptOptions.value = []\n    }\n  } catch (error) {\n    console.error('获取部门选项失败', error)\n    ElMessage.warning('获取部门选项失败，请稍后再试')\n    deptOptions.value = []\n  }\n}\n\n// 构建部门树结构\nconst buildDeptTree = (depts) => {\n  // 创建映射表\n  const deptMap = {}\n  depts.forEach(dept => {\n    dept.children = []\n    deptMap[dept.id] = dept\n  })\n  \n  // 构建树结构\n  const result = []\n  depts.forEach(dept => {\n    if (dept.parentId && deptMap[dept.parentId]) {\n      deptMap[dept.parentId].children.push(dept)\n    } else {\n      result.push(dept)\n    }\n  })\n  \n  return result\n}\n\n// 扁平化部门树结构\nconst flattenDeptTree = (deptTree) => {\n  if (!deptTree || !Array.isArray(deptTree)) {\n    console.warn('部门树结构无效', deptTree)\n    return []\n  }\n  \n  const result = []\n  const flatten = (items) => {\n    items.forEach(item => {\n      if (item && item.id) {\n        result.push({\n          id: item.id,\n          name: item.name\n        })\n        if (item.children && item.children.length > 0) {\n          flatten(item.children)\n        }\n      }\n    })\n  }\n  flatten(deptTree)\n  return result\n}\n\n// 获取岗位选项\nconst getPostOptions = async () => {\n  try {\n    // 使用默认的分页参数\n    const params = {\n      pageSize: 100,\n      pageNum: 1\n    }\n    \n    const res = await getPostList(params)\n    console.log('获取岗位选项响应:', res)\n    \n    // 处理不同的数据格式\n    if (res.data && res.data.items) {\n      // 分页格式\n      postOptions.value = (res.data.items || []).map(item => ({\n        id: item.id,\n        name: item.name\n      }))\n    } else if (res.data && Array.isArray(res.data)) {\n      // 直接是数组格式\n      postOptions.value = res.data.map(item => ({\n        id: item.id,\n        name: item.name\n      }))\n    } else {\n      console.warn('未识别的岗位数据格式')\n      postOptions.value = []\n    }\n  } catch (error) {\n    console.error('获取岗位选项失败', error)\n    ElMessage.warning('获取岗位选项失败，请稍后再试')\n    postOptions.value = []\n  }\n}\n\n// 提交表单\nconst submitForm = () => {\n  userFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        await updateUser(userForm)\n        ElMessage.success('更新成功')\n        dialogVisible.value = false\n        getList()\n      } catch (error) {\n        ElMessage.error('更新失败')\n      }\n    }\n  })\n}\n\n// 分页操作\nconst handleSizeChange = (size) => {\n  queryParams.pageSize = size\n  getList()\n}\n\nconst handleCurrentChange = (page) => {\n  queryParams.pageNum = page\n  getList()\n}\n\n// 查看登录日志\nconst viewLoginLog = async (row) => {\n  loginLogDialogVisible.value = true\n  loginLogQuery.username = row.username\n  getLoginLogList()\n}\n\n// 获取登录日志列表\nconst getLoginLogList = async () => {\n  try {\n    logLoading.value = true\n    const res = await getUserLoginLog(loginLogQuery)\n    console.log('登录日志响应:', res)\n    loginLogList.value = res.data.items || []\n    loginLogTotal.value = res.data.total || 0\n  } catch (error) {\n    console.error('获取登录日志失败', error)\n    loginLogList.value = []\n    loginLogTotal.value = 0\n  } finally {\n    logLoading.value = false\n  }\n}\n\n// 登录日志分页操作\nconst handleLogSizeChange = (size) => {\n  loginLogQuery.pageSize = size\n  getLoginLogList()\n}\n\nconst handleLogCurrentChange = (page) => {\n  loginLogQuery.pageNum = page\n  getLoginLogList()\n}\n\n// 查看操作日志\nconst viewOperLog = async (row) => {\n  operLogDialogVisible.value = true\n  operLogQuery.operName = row.username\n  getOperLogList()\n}\n\n// 获取操作日志列表\nconst getOperLogList = async () => {\n  try {\n    operLogLoading.value = true\n    const res = await getUserOperLog(operLogQuery)\n    console.log('操作日志响应:', res)\n    operLogList.value = res.data.items || []\n    operLogTotal.value = res.data.total || 0\n  } catch (error) {\n    console.error('获取操作日志失败', error)\n    operLogList.value = []\n    operLogTotal.value = 0\n  } finally {\n    operLogLoading.value = false\n  }\n}\n\n// 操作日志分页操作\nconst handleOperLogSizeChange = (size) => {\n  operLogQuery.pageSize = size\n  getOperLogList()\n}\n\nconst handleOperLogCurrentChange = (page) => {\n  operLogQuery.pageNum = page\n  getOperLogList()\n}\n\n// 页面加载时获取数据\nonMounted(() => {\n  getList()\n})\n</script>\n\n<style scoped>\n.app-container {\n  padding: 20px;\n}\n\n.search-card {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.search-form {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.el-pagination {\n  margin-top: 20px;\n  text-align: right;\n}\n\n.pagination {\n  margin-top: 15px;\n  text-align: right;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}