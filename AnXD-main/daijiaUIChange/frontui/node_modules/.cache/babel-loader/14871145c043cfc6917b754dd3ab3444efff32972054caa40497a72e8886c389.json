{"ast":null,"code":"import { ref, reactive, onMounted, nextTick } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { getDeptTree, addDept, updateDept, deleteDept, getDeptById } from '@/api/dept';\n\n// 表格数据和状态\n\nexport default {\n  __name: 'SysDept',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const deptList = ref([]);\n    const deptTreeOptions = ref([]);\n    const loading = ref(false);\n\n    // 对话框相关\n    const dialogVisible = ref(false);\n    const dialogTitle = ref('');\n    const deptFormRef = ref(null);\n    const deptForm = reactive({\n      id: undefined,\n      parentId: 0,\n      name: '',\n      leader: '',\n      phone: '',\n      sortValue: 0,\n      status: 1\n    });\n\n    // 表单验证规则\n    const rules = {\n      name: [{\n        required: true,\n        message: '请输入部门名称',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 50,\n        message: '长度在 2 到 50 个字符',\n        trigger: 'blur'\n      }],\n      parentId: [{\n        required: true,\n        message: '请选择上级部门',\n        trigger: 'change'\n      }],\n      sortValue: [{\n        required: true,\n        message: '请输入排序',\n        trigger: 'blur'\n      }],\n      status: [{\n        required: true,\n        message: '请选择状态',\n        trigger: 'change'\n      }]\n    };\n\n    // 获取部门树\n    const getList = async () => {\n      try {\n        loading.value = true;\n\n        // 获取部门列表数据\n        const res = await getDeptTree();\n        console.log('部门列表响应:', res);\n\n        // 处理部门数据，构建树形结构\n        if (res.data && res.data.items) {\n          // 分页接口返回的是items数组\n          const depts = res.data.items || [];\n          console.log('原始部门数据:', depts);\n\n          // 构建部门树\n          processAndBuildDeptTree(depts);\n        } else if (res.data && Array.isArray(res.data)) {\n          // 直接返回数组的情况\n          console.log('原始部门数据 (数组):', res.data);\n          processAndBuildDeptTree(res.data);\n        } else if (typeof res === 'object' && res !== null) {\n          // 处理其他可能的响应格式\n          const dataArray = Array.isArray(res) ? res : res.items ? res.items : res.data ? Array.isArray(res.data) ? res.data : [] : [];\n          console.log('尝试解析的部门数据:', dataArray);\n          processAndBuildDeptTree(dataArray);\n        } else {\n          deptList.value = [];\n          console.warn('无法识别的响应格式，使用空数组');\n        }\n\n        // 准备树形选择器数据\n        prepareDeptOptions();\n      } catch (error) {\n        console.error('获取部门列表失败', error);\n        ElMessage.error('获取部门列表失败：' + (error.message || '未知错误'));\n        deptList.value = [];\n\n        // 重置部门选项\n        deptTreeOptions.value = [{\n          id: 0,\n          name: '顶级部门',\n          parentId: -1\n        }];\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 处理部门数据并构建树形结构\n    const processAndBuildDeptTree = depts => {\n      if (!depts || depts.length === 0) {\n        console.warn('部门数据为空');\n        deptList.value = [];\n        return;\n      }\n      console.log('处理部门数据:', depts);\n\n      // 构建部门树结构\n      const buildDeptTree = depts => {\n        // 创建一个映射表\n        const deptMap = {};\n        depts.forEach(dept => {\n          // 确保id是字符串类型\n          if (dept.id) {\n            dept.id = String(dept.id);\n          }\n          // 确保parentId是字符串类型\n          if (dept.parentId) {\n            dept.parentId = String(dept.parentId);\n          }\n          dept.children = []; // 初始化children数组\n          deptMap[dept.id] = dept;\n        });\n\n        // 构建树结构\n        const result = [];\n        depts.forEach(dept => {\n          if (dept.parentId && deptMap[dept.parentId]) {\n            // 如果有父节点，添加到父节点的children中\n            deptMap[dept.parentId].children.push(dept);\n          } else {\n            // 没有父节点或父节点不在列表中，作为根节点\n            result.push(dept);\n          }\n        });\n\n        // 按sortValue排序每级的子节点\n        const sortChildren = nodes => {\n          if (!nodes) return;\n          // 对子节点排序\n          nodes.sort((a, b) => (a.sortValue || 0) - (b.sortValue || 0));\n          // 递归排序每个节点的子节点\n          nodes.forEach(node => {\n            if (node.children && node.children.length > 0) {\n              sortChildren(node.children);\n            }\n          });\n        };\n\n        // 对结果进行排序\n        sortChildren(result);\n        return result;\n      };\n\n      // 获取树形结构的部门数据\n      const treeData = buildDeptTree(depts);\n      console.log('构建的树形结构:', treeData);\n\n      // 如果树为空但原始数据不为空，可能是所有部门parentId设置不正确\n      if (treeData.length === 0 && depts.length > 0) {\n        console.warn('树构建失败，尝试将所有部门置为顶级');\n        deptList.value = depts;\n      } else {\n        deptList.value = treeData;\n      }\n    };\n\n    // 准备部门选择器数据\n    const prepareDeptOptions = () => {\n      // 准备树形选择器数据 - 将树形结构平铺\n      const flattenDeptTree = (tree, result = []) => {\n        if (!tree || !Array.isArray(tree)) return result;\n        tree.forEach(node => {\n          if (node) {\n            // 创建新对象，避免引用问题\n            const nodeCopy = {\n              id: node.id,\n              name: node.name,\n              parentId: node.parentId,\n              leader: node.leader,\n              phone: node.phone,\n              sortValue: node.sortValue,\n              status: node.status\n            };\n            result.push(nodeCopy);\n            if (node.children && node.children.length > 0) {\n              flattenDeptTree(node.children, result);\n            }\n          }\n        });\n        return result;\n      };\n\n      // 构建选择器数据\n      deptTreeOptions.value = [{\n        id: 0,\n        name: '顶级部门',\n        parentId: -1\n      }];\n\n      // 添加已获取的部门到选项（平铺处理）\n      if (deptList.value && deptList.value.length > 0) {\n        const flatDepts = flattenDeptTree(deptList.value);\n        deptTreeOptions.value = deptTreeOptions.value.concat(flatDepts);\n      }\n    };\n\n    // 重置表单\n    const resetForm = () => {\n      deptForm.id = undefined;\n      deptForm.parentId = 0;\n      deptForm.name = '';\n      deptForm.leader = '';\n      deptForm.phone = '';\n      deptForm.sortValue = 0;\n      deptForm.status = 1;\n      nextTick(() => {\n        deptFormRef.value?.resetFields();\n      });\n    };\n\n    // 新增部门\n    const handleAdd = () => {\n      resetForm();\n      dialogTitle.value = '新增部门';\n      dialogVisible.value = true;\n    };\n\n    // 编辑部门\n    const handleEdit = async row => {\n      resetForm();\n      dialogTitle.value = '编辑部门';\n\n      // 获取最新的部门信息\n      try {\n        const res = await getDeptById(row.id);\n        console.log('获取部门详情:', res);\n        if (res.data) {\n          // 填充表单数据\n          Object.assign(deptForm, res.data);\n\n          // 避免编辑时选择自己作为父级部门\n          updateDeptOptions(row.id);\n        } else {\n          // 如果获取失败，使用表格中的数据\n          Object.assign(deptForm, row);\n        }\n\n        // 最后打开对话框\n        dialogVisible.value = true;\n      } catch (error) {\n        console.error('获取部门详情失败:', error);\n        ElMessage.error('获取部门信息失败');\n      }\n    };\n\n    // 更新部门选项，去除当前部门及其子部门，避免选择自己或子部门作为父部门\n    const updateDeptOptions = currentDeptId => {\n      // 找出所有子部门ID\n      const findChildDeptIds = (deptId, deptList) => {\n        const childIds = [];\n        const findChildren = id => {\n          deptList.forEach(dept => {\n            if (dept.parentId === id) {\n              childIds.push(dept.id);\n              findChildren(dept.id);\n            }\n          });\n        };\n        findChildren(deptId);\n        return childIds;\n      };\n\n      // 获取所有原始部门\n      prepareDeptOptions();\n\n      // 获取所有部门（扁平结构）\n      const allDepts = [];\n      const flattenDepts = depts => {\n        if (!depts) return;\n        depts.forEach(dept => {\n          allDepts.push(dept);\n          if (dept.children && dept.children.length > 0) {\n            flattenDepts(dept.children);\n          }\n        });\n      };\n      flattenDepts(deptList.value);\n\n      // 找出子部门ID\n      const childDeptIds = findChildDeptIds(currentDeptId, allDepts);\n      childDeptIds.push(currentDeptId); // 添加自己的ID\n\n      // 过滤掉不能选择的部门\n      deptTreeOptions.value = deptTreeOptions.value.filter(dept => !childDeptIds.includes(dept.id));\n    };\n\n    // 删除部门\n    const handleDelete = row => {\n      // 检查是否有子部门\n      if (row.children && row.children.length > 0) {\n        ElMessage.warning('该部门下有子部门，请先删除子部门');\n        return;\n      }\n      ElMessageBox.confirm(`确定要删除部门 ${row.name} 吗?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await deleteDept(row.id);\n          ElMessage.success('删除成功');\n          getList();\n        } catch (error) {\n          console.error('删除部门失败:', error);\n          ElMessage.error('删除失败');\n        }\n      }).catch(() => {});\n    };\n\n    // 取消表单\n    const cancelForm = () => {\n      dialogVisible.value = false;\n      resetForm();\n    };\n\n    // 提交表单\n    const submitForm = async () => {\n      deptFormRef.value.validate(async valid => {\n        if (valid) {\n          try {\n            if (deptForm.id) {\n              // 编辑部门\n              await updateDept(deptForm);\n              ElMessage.success('修改部门成功');\n            } else {\n              // 新增部门\n              await addDept(deptForm);\n              ElMessage.success('新增部门成功');\n            }\n            dialogVisible.value = false;\n            getList();\n          } catch (error) {\n            console.error('操作失败', error);\n            ElMessage.error('操作失败，请稍后重试');\n          }\n        }\n      });\n    };\n\n    // 页面加载时获取数据\n    onMounted(() => {\n      getList();\n    });\n    const __returned__ = {\n      deptList,\n      deptTreeOptions,\n      loading,\n      dialogVisible,\n      dialogTitle,\n      deptFormRef,\n      deptForm,\n      rules,\n      getList,\n      processAndBuildDeptTree,\n      prepareDeptOptions,\n      resetForm,\n      handleAdd,\n      handleEdit,\n      updateDeptOptions,\n      handleDelete,\n      cancelForm,\n      submitForm,\n      ref,\n      reactive,\n      onMounted,\n      nextTick,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get getDeptTree() {\n        return getDeptTree;\n      },\n      get addDept() {\n        return addDept;\n      },\n      get updateDept() {\n        return updateDept;\n      },\n      get deleteDept() {\n        return deleteDept;\n      },\n      get getDeptById() {\n        return getDeptById;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","nextTick","ElMessage","ElMessageBox","getDeptTree","addDept","updateDept","deleteDept","getDeptById","deptList","deptTreeOptions","loading","dialogVisible","dialogTitle","deptFormRef","deptForm","id","undefined","parentId","name","leader","phone","sortValue","status","rules","required","message","trigger","min","max","getList","value","res","console","log","data","items","depts","processAndBuildDeptTree","Array","isArray","dataArray","warn","prepareDeptOptions","error","length","buildDeptTree","deptMap","forEach","dept","String","children","result","push","sortChildren","nodes","sort","a","b","node","treeData","flattenDeptTree","tree","nodeCopy","flatDepts","concat","resetForm","resetFields","handleAdd","handleEdit","row","Object","assign","updateDeptOptions","currentDeptId","findChildDeptIds","deptId","childIds","findChildren","allDepts","flattenDepts","childDeptIds","filter","includes","handleDelete","warning","confirm","confirmButtonText","cancelButtonText","type","then","success","catch","cancelForm","submitForm","validate","valid"],"sources":["/Users/apple/Desktop/111111/zongheshixi/daijiaguanli/frontui/src/pages/system/SysDept.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-card>\n      <template #header>\n        <div class=\"card-header\">\n          <span>部门管理</span>\n          <el-button type=\"primary\" @click=\"handleAdd\">新增部门</el-button>\n        </div>\n      </template>\n      \n      <el-table v-loading=\"loading\" :data=\"deptList\" row-key=\"id\" border :tree-props=\"{ children: 'children' }\" :default-expand-all=\"true\">\n        <el-table-column prop=\"name\" label=\"部门名称\" />\n        <el-table-column prop=\"leader\" label=\"负责人\" />\n        <el-table-column prop=\"phone\" label=\"联系电话\" />\n        <el-table-column prop=\"email\" label=\"邮箱\" />\n        <el-table-column prop=\"sortValue\" label=\"排序\" width=\"80\" />\n        <el-table-column prop=\"status\" label=\"状态\" width=\"80\">\n          <template #default=\"scope\">\n            <el-tag :type=\"scope.row.status === 1 ? 'success' : 'danger'\">\n              {{ scope.row.status === 1 ? '正常' : '停用' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"200\">\n          <template #default=\"scope\">\n            <el-button type=\"primary\" link @click=\"handleEdit(scope.row)\">编辑</el-button>\n            <el-button type=\"danger\" link @click=\"handleDelete(scope.row)\">删除</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n\n    <!-- 添加/编辑部门对话框 -->\n    <el-dialog \n      :title=\"dialogTitle\" \n      v-model=\"dialogVisible\" \n      width=\"500px\" \n      append-to-body\n      :close-on-click-modal=\"false\"\n    >\n      <el-form \n        ref=\"deptFormRef\" \n        :model=\"deptForm\" \n        :rules=\"rules\" \n        label-width=\"80px\"\n      >\n        <el-form-item label=\"上级部门\" prop=\"parentId\">\n          <el-tree-select\n            v-model=\"deptForm.parentId\"\n            :data=\"deptTreeOptions\"\n            :render-after-expand=\"false\"\n            node-key=\"id\"\n            :props=\"{ label: 'name', value: 'id', children: 'children' }\"\n            placeholder=\"请选择上级部门\"\n            check-strictly\n            clearable\n          />\n        </el-form-item>\n        <el-form-item label=\"部门名称\" prop=\"name\">\n          <el-input v-model=\"deptForm.name\" placeholder=\"请输入部门名称\" />\n        </el-form-item>\n        <el-form-item label=\"负责人\" prop=\"leader\">\n          <el-input v-model=\"deptForm.leader\" placeholder=\"请输入负责人\" />\n        </el-form-item>\n        <el-form-item label=\"联系电话\" prop=\"phone\">\n          <el-input v-model=\"deptForm.phone\" placeholder=\"请输入联系电话\" />\n        </el-form-item>\n        <el-form-item label=\"排序\" prop=\"sortValue\">\n          <el-input-number v-model=\"deptForm.sortValue\" :min=\"0\" :max=\"999\" controls-position=\"right\" />\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"status\">\n          <el-radio-group v-model=\"deptForm.status\">\n            <el-radio :label=\"1\">正常</el-radio>\n            <el-radio :label=\"0\">停用</el-radio>\n          </el-radio-group>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <div class=\"dialog-footer\">\n          <el-button @click=\"cancelForm\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted, nextTick } from 'vue'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { getDeptTree, addDept, updateDept, deleteDept, getDeptById } from '@/api/dept'\n\n// 表格数据和状态\nconst deptList = ref([])\nconst deptTreeOptions = ref([])\nconst loading = ref(false)\n\n// 对话框相关\nconst dialogVisible = ref(false)\nconst dialogTitle = ref('')\nconst deptFormRef = ref(null)\nconst deptForm = reactive({\n  id: undefined,\n  parentId: 0,\n  name: '',\n  leader: '',\n  phone: '',\n  sortValue: 0,\n  status: 1\n})\n\n// 表单验证规则\nconst rules = {\n  name: [\n    { required: true, message: '请输入部门名称', trigger: 'blur' },\n    { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }\n  ],\n  parentId: [\n    { required: true, message: '请选择上级部门', trigger: 'change' }\n  ],\n  sortValue: [\n    { required: true, message: '请输入排序', trigger: 'blur' }\n  ],\n  status: [\n    { required: true, message: '请选择状态', trigger: 'change' }\n  ]\n}\n\n// 获取部门树\nconst getList = async () => {\n  try {\n    loading.value = true\n    \n    // 获取部门列表数据\n    const res = await getDeptTree()\n    console.log('部门列表响应:', res)\n    \n    // 处理部门数据，构建树形结构\n    if (res.data && res.data.items) {\n      // 分页接口返回的是items数组\n      const depts = res.data.items || []\n      console.log('原始部门数据:', depts)\n      \n      // 构建部门树\n      processAndBuildDeptTree(depts)\n    } else if (res.data && Array.isArray(res.data)) {\n      // 直接返回数组的情况\n      console.log('原始部门数据 (数组):', res.data)\n      processAndBuildDeptTree(res.data)\n    } else if (typeof res === 'object' && res !== null) {\n      // 处理其他可能的响应格式\n      const dataArray = Array.isArray(res) ? res : \n                      (res.items ? res.items : \n                      (res.data ? (Array.isArray(res.data) ? res.data : []) : []));\n      \n      console.log('尝试解析的部门数据:', dataArray);\n      processAndBuildDeptTree(dataArray);\n    } else {\n      deptList.value = []\n      console.warn('无法识别的响应格式，使用空数组')\n    }\n    \n    // 准备树形选择器数据\n    prepareDeptOptions()\n  } catch (error) {\n    console.error('获取部门列表失败', error)\n    ElMessage.error('获取部门列表失败：' + (error.message || '未知错误'))\n    deptList.value = []\n    \n    // 重置部门选项\n    deptTreeOptions.value = [{ id: 0, name: '顶级部门', parentId: -1 }]\n  } finally {\n    loading.value = false\n  }\n}\n\n// 处理部门数据并构建树形结构\nconst processAndBuildDeptTree = (depts) => {\n  if (!depts || depts.length === 0) {\n    console.warn('部门数据为空');\n    deptList.value = [];\n    return;\n  }\n  \n  console.log('处理部门数据:', depts);\n  \n  // 构建部门树结构\n  const buildDeptTree = (depts) => {\n    // 创建一个映射表\n    const deptMap = {}\n    depts.forEach(dept => {\n      // 确保id是字符串类型\n      if (dept.id) {\n        dept.id = String(dept.id);\n      }\n      // 确保parentId是字符串类型\n      if (dept.parentId) {\n        dept.parentId = String(dept.parentId);\n      }\n      \n      dept.children = [] // 初始化children数组\n      deptMap[dept.id] = dept\n    })\n    \n    // 构建树结构\n    const result = []\n    depts.forEach(dept => {\n      if (dept.parentId && deptMap[dept.parentId]) {\n        // 如果有父节点，添加到父节点的children中\n        deptMap[dept.parentId].children.push(dept)\n      } else {\n        // 没有父节点或父节点不在列表中，作为根节点\n        result.push(dept)\n      }\n    })\n    \n    // 按sortValue排序每级的子节点\n    const sortChildren = (nodes) => {\n      if (!nodes) return\n      // 对子节点排序\n      nodes.sort((a, b) => (a.sortValue || 0) - (b.sortValue || 0))\n      // 递归排序每个节点的子节点\n      nodes.forEach(node => {\n        if (node.children && node.children.length > 0) {\n          sortChildren(node.children)\n        }\n      })\n    }\n    \n    // 对结果进行排序\n    sortChildren(result)\n    \n    return result\n  }\n  \n  // 获取树形结构的部门数据\n  const treeData = buildDeptTree(depts)\n  console.log('构建的树形结构:', treeData)\n  \n  // 如果树为空但原始数据不为空，可能是所有部门parentId设置不正确\n  if (treeData.length === 0 && depts.length > 0) {\n    console.warn('树构建失败，尝试将所有部门置为顶级')\n    deptList.value = depts\n  } else {\n    deptList.value = treeData\n  }\n}\n\n// 准备部门选择器数据\nconst prepareDeptOptions = () => {\n  // 准备树形选择器数据 - 将树形结构平铺\n  const flattenDeptTree = (tree, result = []) => {\n    if (!tree || !Array.isArray(tree)) return result\n    \n    tree.forEach(node => {\n      if (node) {\n        // 创建新对象，避免引用问题\n        const nodeCopy = {\n          id: node.id,\n          name: node.name,\n          parentId: node.parentId,\n          leader: node.leader,\n          phone: node.phone,\n          sortValue: node.sortValue,\n          status: node.status\n        }\n        \n        result.push(nodeCopy)\n        if (node.children && node.children.length > 0) {\n          flattenDeptTree(node.children, result)\n        }\n      }\n    })\n    \n    return result\n  }\n  \n  // 构建选择器数据\n  deptTreeOptions.value = [{ id: 0, name: '顶级部门', parentId: -1 }]\n  \n  // 添加已获取的部门到选项（平铺处理）\n  if (deptList.value && deptList.value.length > 0) {\n    const flatDepts = flattenDeptTree(deptList.value)\n    deptTreeOptions.value = deptTreeOptions.value.concat(flatDepts)\n  }\n}\n\n// 重置表单\nconst resetForm = () => {\n  deptForm.id = undefined\n  deptForm.parentId = 0\n  deptForm.name = ''\n  deptForm.leader = ''\n  deptForm.phone = ''\n  deptForm.sortValue = 0\n  deptForm.status = 1\n  nextTick(() => {\n    deptFormRef.value?.resetFields()\n  })\n}\n\n// 新增部门\nconst handleAdd = () => {\n  resetForm()\n  dialogTitle.value = '新增部门'\n  dialogVisible.value = true\n}\n\n// 编辑部门\nconst handleEdit = async (row) => {\n  resetForm()\n  dialogTitle.value = '编辑部门'\n  \n  // 获取最新的部门信息\n  try {\n    const res = await getDeptById(row.id)\n    console.log('获取部门详情:', res)\n    \n    if (res.data) {\n      // 填充表单数据\n      Object.assign(deptForm, res.data)\n      \n      // 避免编辑时选择自己作为父级部门\n      updateDeptOptions(row.id)\n    } else {\n      // 如果获取失败，使用表格中的数据\n      Object.assign(deptForm, row)\n    }\n    \n    // 最后打开对话框\n    dialogVisible.value = true\n  } catch (error) {\n    console.error('获取部门详情失败:', error)\n    ElMessage.error('获取部门信息失败')\n  }\n}\n\n// 更新部门选项，去除当前部门及其子部门，避免选择自己或子部门作为父部门\nconst updateDeptOptions = (currentDeptId) => {\n  // 找出所有子部门ID\n  const findChildDeptIds = (deptId, deptList) => {\n    const childIds = []\n    \n    const findChildren = (id) => {\n      deptList.forEach(dept => {\n        if (dept.parentId === id) {\n          childIds.push(dept.id)\n          findChildren(dept.id)\n        }\n      })\n    }\n    \n    findChildren(deptId)\n    return childIds\n  }\n  \n  // 获取所有原始部门\n  prepareDeptOptions()\n  \n  // 获取所有部门（扁平结构）\n  const allDepts = []\n  const flattenDepts = (depts) => {\n    if (!depts) return\n    \n    depts.forEach(dept => {\n      allDepts.push(dept)\n      if (dept.children && dept.children.length > 0) {\n        flattenDepts(dept.children)\n      }\n    })\n  }\n  flattenDepts(deptList.value)\n  \n  // 找出子部门ID\n  const childDeptIds = findChildDeptIds(currentDeptId, allDepts)\n  childDeptIds.push(currentDeptId) // 添加自己的ID\n  \n  // 过滤掉不能选择的部门\n  deptTreeOptions.value = deptTreeOptions.value.filter(dept => \n    !childDeptIds.includes(dept.id)\n  )\n}\n\n// 删除部门\nconst handleDelete = (row) => {\n  // 检查是否有子部门\n  if (row.children && row.children.length > 0) {\n    ElMessage.warning('该部门下有子部门，请先删除子部门')\n    return\n  }\n  \n  ElMessageBox.confirm(`确定要删除部门 ${row.name} 吗?`, '提示', {\n    confirmButtonText: '确定',\n    cancelButtonText: '取消',\n    type: 'warning'\n  }).then(async () => {\n    try {\n      await deleteDept(row.id)\n      ElMessage.success('删除成功')\n      getList()\n    } catch (error) {\n      console.error('删除部门失败:', error)\n      ElMessage.error('删除失败')\n    }\n  }).catch(() => {})\n}\n\n// 取消表单\nconst cancelForm = () => {\n  dialogVisible.value = false\n  resetForm()\n}\n\n// 提交表单\nconst submitForm = async () => {\n  deptFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        if (deptForm.id) {\n          // 编辑部门\n          await updateDept(deptForm)\n          ElMessage.success('修改部门成功')\n        } else {\n          // 新增部门\n          await addDept(deptForm)\n          ElMessage.success('新增部门成功')\n        }\n        dialogVisible.value = false\n        getList()\n      } catch (error) {\n        console.error('操作失败', error)\n        ElMessage.error('操作失败，请稍后重试')\n      }\n    }\n  })\n}\n\n// 页面加载时获取数据\nonMounted(() => {\n  getList()\n})\n</script>\n\n<style scoped>\n.app-container {\n  padding: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}