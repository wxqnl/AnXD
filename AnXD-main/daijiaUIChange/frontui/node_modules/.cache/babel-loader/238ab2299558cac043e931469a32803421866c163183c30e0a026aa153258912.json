{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"login-container\"\n};\nimport { reactive, ref } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter, useRoute } from 'vue-router';\nimport { ElMessage } from 'element-plus';\n\n// 创建表单引用\n\nexport default {\n  __name: 'Login',\n  setup(__props) {\n    const loginFormRef = ref(null);\n    // 使用store\n    const store = useStore();\n    // 使用路由\n    const router = useRouter();\n    const route = useRoute();\n\n    // 登录表单数据\n    const loginForm = reactive({\n      username: '',\n      password: ''\n    });\n\n    // 表单验证规则\n    const loginRules = {\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 20,\n        message: '长度在 3 到 20 个字符',\n        trigger: 'blur'\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        min: 6,\n        max: 20,\n        message: '长度在 6 到 20 个字符',\n        trigger: 'blur'\n      }]\n    };\n\n    // 登录状态\n    const loading = ref(false);\n\n    // 登录处理\n    const handleLogin = async () => {\n      // 验证表单\n      if (!loginFormRef.value) return;\n      await loginFormRef.value.validate(async valid => {\n        if (valid) {\n          try {\n            loading.value = true;\n            await store.dispatch('user/login', loginForm);\n            await store.dispatch('user/getUserInfo');\n            ElMessage({\n              message: '登录成功',\n              type: 'success'\n            });\n\n            // 重定向到首页或之前尝试访问的页面\n            router.push(route.query.redirect || '/');\n          } catch (error) {\n            ElMessage.error(error.message || '登录失败，请重试');\n          } finally {\n            loading.value = false;\n          }\n        } else {\n          return false;\n        }\n      });\n    };\n    return (_ctx, _cache) => {\n      const _component_el_input = _resolveComponent(\"el-input\");\n      const _component_el_form_item = _resolveComponent(\"el-form-item\");\n      const _component_el_button = _resolveComponent(\"el-button\");\n      const _component_el_form = _resolveComponent(\"el-form\");\n      const _component_el_card = _resolveComponent(\"el-card\");\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, {\n        class: \"login-card\"\n      }, {\n        default: _withCtx(() => [_cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n          class: \"title\"\n        }, [_createElementVNode(\"h2\", null, \"代驾管理系统\")], -1)), _createVNode(_component_el_form, {\n          model: loginForm,\n          rules: loginRules,\n          ref_key: \"loginFormRef\",\n          ref: loginFormRef,\n          class: \"login-form\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            prop: \"username\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: loginForm.username,\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => loginForm.username = $event),\n              \"prefix-icon\": \"User\",\n              placeholder: \"请输入用户名\"\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            prop: \"password\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: loginForm.password,\n              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => loginForm.password = $event),\n              \"prefix-icon\": \"Lock\",\n              type: \"password\",\n              placeholder: \"请输入密码\",\n              \"show-password\": \"\"\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, null, {\n            default: _withCtx(() => [_createVNode(_component_el_button, {\n              type: \"primary\",\n              class: \"login-button\",\n              loading: loading.value,\n              onClick: handleLogin\n            }, {\n              default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"登录\")])),\n              _: 1\n            }, 8, [\"loading\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8, [\"model\"])]),\n        _: 1\n      })]);\n    };\n  }\n};","map":{"version":3,"names":["reactive","ref","useStore","useRouter","useRoute","ElMessage","loginFormRef","store","router","route","loginForm","username","password","loginRules","required","message","trigger","min","max","loading","handleLogin","value","validate","valid","dispatch","type","push","query","redirect","error"],"sources":["D:/LIHAOZE/JavaStudyCode/frontui/frontui/src/pages/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <el-card class=\"login-card\">\n      <div class=\"title\">\n        <h2>代驾管理系统</h2>\n      </div>\n      <el-form :model=\"loginForm\" :rules=\"loginRules\" ref=\"loginFormRef\" class=\"login-form\">\n        <el-form-item prop=\"username\">\n          <el-input v-model=\"loginForm.username\" prefix-icon=\"User\" placeholder=\"请输入用户名\" />\n        </el-form-item>\n        <el-form-item prop=\"password\">\n          <el-input v-model=\"loginForm.password\" prefix-icon=\"Lock\" type=\"password\" placeholder=\"请输入密码\" show-password />\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" class=\"login-button\" :loading=\"loading\" @click=\"handleLogin\">登录</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { reactive, ref } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter, useRoute } from 'vue-router'\nimport { ElMessage } from 'element-plus'\n\n// 创建表单引用\nconst loginFormRef = ref(null)\n// 使用store\nconst store = useStore()\n// 使用路由\nconst router = useRouter()\nconst route = useRoute()\n\n// 登录表单数据\nconst loginForm = reactive({\n  username: '',\n  password: ''\n})\n\n// 表单验证规则\nconst loginRules = {\n  username: [\n    { required: true, message: '请输入用户名', trigger: 'blur' },\n    { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }\n  ],\n  password: [\n    { required: true, message: '请输入密码', trigger: 'blur' },\n    { min: 6, max: 20, message: '长度在 6 到 20 个字符', trigger: 'blur' }\n  ]\n}\n\n// 登录状态\nconst loading = ref(false)\n\n// 登录处理\nconst handleLogin = async () => {\n  // 验证表单\n  if (!loginFormRef.value) return\n  \n  await loginFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        loading.value = true\n        await store.dispatch('user/login', loginForm)\n        await store.dispatch('user/getUserInfo')\n        \n        ElMessage({\n          message: '登录成功',\n          type: 'success'\n        })\n        \n        // 重定向到首页或之前尝试访问的页面\n        router.push(route.query.redirect || '/')\n      } catch (error) {\n        ElMessage.error(error.message || '登录失败，请重试')\n      } finally {\n        loading.value = false\n      }\n    } else {\n      return false\n    }\n  })\n}\n</script>\n\n<style scoped>\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  background-color: #f0f2f5;\n}\n\n.login-card {\n  width: 400px;\n  padding: 20px 30px;\n  border-radius: 8px;\n}\n\n.title {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.title h2 {\n  font-weight: 600;\n  color: #409EFF;\n  margin: 0;\n}\n\n.login-form {\n  margin-top: 30px;\n}\n\n.login-button {\n  width: 100%;\n}\n</style> "],"mappings":";;;;AAsBA,SAASA,QAAQ,EAAEC,GAAG,QAAQ,KAAI;AAClC,SAASC,QAAQ,QAAQ,MAAK;AAC9B,SAASC,SAAS,EAAEC,QAAQ,QAAQ,YAAW;AAC/C,SAASC,SAAS,QAAQ,cAAa;;AAEvC;;;;;IACA,MAAMC,YAAY,GAAGL,GAAG,CAAC,IAAI;IAC7B;IACA,MAAMM,KAAK,GAAGL,QAAQ,CAAC;IACvB;IACA,MAAMM,MAAM,GAAGL,SAAS,CAAC;IACzB,MAAMM,KAAK,GAAGL,QAAQ,CAAC;;IAEvB;IACA,MAAMM,SAAS,GAAGV,QAAQ,CAAC;MACzBW,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;;IAED;IACA,MAAMC,UAAU,GAAG;MACjBF,QAAQ,EAAE,CACR;QAAEG,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAO,CAAC,EACtD;QAAEC,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE,EAAE;QAAEH,OAAO,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAO,EAC/D;MACDJ,QAAQ,EAAE,CACR;QAAEE,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC,EACrD;QAAEC,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE,EAAE;QAAEH,OAAO,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAO;IAElE;;IAEA;IACA,MAAMG,OAAO,GAAGlB,GAAG,CAAC,KAAK;;IAEzB;IACA,MAAMmB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B;MACA,IAAI,CAACd,YAAY,CAACe,KAAK,EAAE;MAEzB,MAAMf,YAAY,CAACe,KAAK,CAACC,QAAQ,CAAC,MAAOC,KAAK,IAAK;QACjD,IAAIA,KAAK,EAAE;UACT,IAAI;YACFJ,OAAO,CAACE,KAAK,GAAG,IAAG;YACnB,MAAMd,KAAK,CAACiB,QAAQ,CAAC,YAAY,EAAEd,SAAS;YAC5C,MAAMH,KAAK,CAACiB,QAAQ,CAAC,kBAAkB;YAEvCnB,SAAS,CAAC;cACRU,OAAO,EAAE,MAAM;cACfU,IAAI,EAAE;YACR,CAAC;;YAED;YACAjB,MAAM,CAACkB,IAAI,CAACjB,KAAK,CAACkB,KAAK,CAACC,QAAQ,IAAI,GAAG;UACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;YACdxB,SAAS,CAACwB,KAAK,CAACA,KAAK,CAACd,OAAO,IAAI,UAAU;UAC7C,CAAC,SAAS;YACRI,OAAO,CAACE,KAAK,GAAG,KAAI;UACtB;QACF,CAAC,MAAM;UACL,OAAO,KAAI;QACb;MACF,CAAC;IACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}