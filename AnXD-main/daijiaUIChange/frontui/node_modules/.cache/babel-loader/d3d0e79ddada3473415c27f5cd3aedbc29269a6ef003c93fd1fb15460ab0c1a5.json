{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api',\n  // url = base url + request url\n  timeout: 15000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  if (store.state.user.token) {\n    // 让每个请求携带token\n    // 如果后端需要Bearer前缀，取消注释下面这行\n    // config.headers['Authorization'] = 'Bearer ' + getToken()\n\n    // 如果后端不需要Bearer前缀，使用这行\n    config.headers['Authorization'] = getToken();\n    console.log('发送请求携带token:', config.url, config.headers['Authorization']);\n  } else {\n    console.warn('发送请求没有token:', config.url);\n  }\n\n  // 记录请求的详细信息\n  console.log('请求详情:', {\n    url: config.url,\n    method: config.method,\n    params: config.params,\n    data: config.data\n  });\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.error('请求拦截器错误:', error); // for debug\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // 对于PUT请求的布尔值响应特殊处理\n  if (response.config.method === 'put' && typeof response.data === 'boolean') {\n    console.log('PUT请求返回布尔值:', response.data);\n    return response.data;\n  }\n\n  // 首先检查响应数据的类型\n  if (typeof response.data === 'boolean') {\n    // 如果直接返回true/false（如更新用户接口）\n    console.log('API响应布尔值:', response.data);\n    return response.data;\n  }\n\n  // 如果响应不是对象，可能是字符串或其他类型\n  if (typeof response.data !== 'object' || response.data === null) {\n    console.log('API响应非对象值:', response.data);\n    return response.data;\n  }\n  const res = response.data;\n\n  // 调试信息\n  console.log('API响应对象:', res);\n\n  // 如果返回的状态码不是200，说明请求异常\n  if (res.code !== undefined && res.code !== 200) {\n    // 响应处理前，记录详细的错误信息\n    console.error('请求响应异常:', {\n      url: response.config.url,\n      method: response.config.method,\n      statusCode: res.code,\n      message: res.message,\n      data: res.data\n    });\n    ElMessage({\n      message: res.message || '系统异常',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.code === 401 || res.code === 208) {\n      // 重新登录\n      store.dispatch('user/logout').then(() => {\n        location.reload();\n      });\n    }\n    return Promise.reject(new Error(res.message || '系统异常'));\n  } else {\n    return res;\n  }\n}, error => {\n  console.log('err', error); // for debug\n\n  // 获取请求的URL和方法\n  const url = error.config ? error.config.url : '未知URL';\n  const method = error.config ? error.config.method : '未知方法';\n  console.log(`请求失败: ${method.toUpperCase()} ${url}`);\n\n  // 打印详细错误信息\n  if (error.response) {\n    console.error('响应错误详情:', {\n      url: url,\n      method: method,\n      status: error.response.status,\n      statusText: error.response.statusText,\n      headers: error.response.headers,\n      data: error.response.data\n    });\n\n    // 如果是SysUser更新失败，可能是格式问题\n    if (method.toLowerCase() === 'put' && url.includes('/sysUser')) {\n      console.log('分析更新用户失败原因...');\n      if (error.config && error.config.data) {\n        try {\n          const requestData = JSON.parse(error.config.data);\n          console.log('请求数据分析:', requestData);\n\n          // 检查必填字段\n          const missingFields = [];\n          ['id', 'username', 'name', 'phone'].forEach(field => {\n            if (!requestData[field]) {\n              missingFields.push(field);\n            }\n          });\n          if (missingFields.length > 0) {\n            console.error('缺少必填字段:', missingFields);\n          }\n\n          // 检查数据类型\n          if (requestData.id && isNaN(Number(requestData.id))) {\n            console.error('ID不是有效的数字');\n          }\n          if (requestData.deptId && isNaN(Number(requestData.deptId))) {\n            console.error('部门ID不是有效的数字');\n          }\n          if (requestData.postId && isNaN(Number(requestData.postId))) {\n            console.error('岗位ID不是有效的数字');\n          }\n        } catch (e) {\n          console.error('解析请求数据失败:', e);\n        }\n      }\n    }\n  } else {\n    console.error('网络错误:', error.message);\n  }\n  let errorMsg = '请求失败';\n  if (error.response && error.response.status) {\n    switch (error.response.status) {\n      case 401:\n        errorMsg = '未授权，请重新登录';\n        // 清除token并返回登录页\n        store.dispatch('user/logout').then(() => {\n          location.reload();\n        });\n        break;\n      case 403:\n        errorMsg = '拒绝访问';\n        break;\n      case 404:\n        errorMsg = '请求的资源不存在';\n        break;\n      case 500:\n        errorMsg = '服务器内部错误';\n        if (error.response.data && error.response.data.message) {\n          errorMsg += ': ' + error.response.data.message;\n        } else if (method.toLowerCase() === 'put' && url.includes('/sysUser')) {\n          errorMsg = '更新用户信息失败，请检查数据格式是否正确';\n        }\n        break;\n      default:\n        errorMsg = error.message || '未知错误';\n    }\n  }\n  ElMessage({\n    message: errorMsg,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","store","getToken","service","create","baseURL","timeout","interceptors","request","use","config","state","user","token","headers","console","log","url","warn","method","params","data","error","Promise","reject","response","res","code","undefined","statusCode","message","type","duration","dispatch","then","location","reload","Error","toUpperCase","status","statusText","toLowerCase","includes","requestData","JSON","parse","missingFields","forEach","field","push","length","id","isNaN","Number","deptId","postId","e","errorMsg"],"sources":["D:/LIHAOZE/JavaStudyCode/frontui/frontui/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport store from '@/store'\nimport { getToken } from '@/utils/auth'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api', // url = base url + request url\n  timeout: 15000 // 请求超时时间\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    // 在发送请求之前做些什么\n    if (store.state.user.token) {\n      // 让每个请求携带token\n      // 如果后端需要Bearer前缀，取消注释下面这行\n      // config.headers['Authorization'] = 'Bearer ' + getToken()\n      \n      // 如果后端不需要Bearer前缀，使用这行\n      config.headers['Authorization'] = getToken()\n      \n      console.log('发送请求携带token:', config.url, config.headers['Authorization'])\n    } else {\n      console.warn('发送请求没有token:', config.url)\n    }\n    \n    // 记录请求的详细信息\n    console.log('请求详情:', {\n      url: config.url,\n      method: config.method,\n      params: config.params,\n      data: config.data\n    });\n    \n    return config\n  },\n  error => {\n    // 对请求错误做些什么\n    console.error('请求拦截器错误:', error) // for debug\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    // 对于PUT请求的布尔值响应特殊处理\n    if (response.config.method === 'put' && typeof response.data === 'boolean') {\n      console.log('PUT请求返回布尔值:', response.data);\n      return response.data;\n    }\n    \n    // 首先检查响应数据的类型\n    if (typeof response.data === 'boolean') {\n      // 如果直接返回true/false（如更新用户接口）\n      console.log('API响应布尔值:', response.data);\n      return response.data;\n    }\n    \n    // 如果响应不是对象，可能是字符串或其他类型\n    if (typeof response.data !== 'object' || response.data === null) {\n      console.log('API响应非对象值:', response.data);\n      return response.data;\n    }\n    \n    const res = response.data;\n    \n    // 调试信息\n    console.log('API响应对象:', res);\n    \n    // 如果返回的状态码不是200，说明请求异常\n    if (res.code !== undefined && res.code !== 200) {\n      // 响应处理前，记录详细的错误信息\n      console.error('请求响应异常:', {\n        url: response.config.url,\n        method: response.config.method,\n        statusCode: res.code,\n        message: res.message,\n        data: res.data\n      });\n      \n      ElMessage({\n        message: res.message || '系统异常',\n        type: 'error',\n        duration: 5 * 1000\n      });\n      \n      // 401: 未登录或token过期\n      if (res.code === 401 || res.code === 208) {\n        // 重新登录\n        store.dispatch('user/logout').then(() => {\n          location.reload();\n        });\n      }\n      return Promise.reject(new Error(res.message || '系统异常'));\n    } else {\n      return res;\n    }\n  },\n  error => {\n    console.log('err', error); // for debug\n    \n    // 获取请求的URL和方法\n    const url = error.config ? error.config.url : '未知URL';\n    const method = error.config ? error.config.method : '未知方法';\n    console.log(`请求失败: ${method.toUpperCase()} ${url}`);\n    \n    // 打印详细错误信息\n    if (error.response) {\n      console.error('响应错误详情:', {\n        url: url,\n        method: method,\n        status: error.response.status,\n        statusText: error.response.statusText,\n        headers: error.response.headers,\n        data: error.response.data\n      });\n      \n      // 如果是SysUser更新失败，可能是格式问题\n      if (method.toLowerCase() === 'put' && url.includes('/sysUser')) {\n        console.log('分析更新用户失败原因...');\n        if (error.config && error.config.data) {\n          try {\n            const requestData = JSON.parse(error.config.data);\n            console.log('请求数据分析:', requestData);\n            \n            // 检查必填字段\n            const missingFields = [];\n            ['id', 'username', 'name', 'phone'].forEach(field => {\n              if (!requestData[field]) {\n                missingFields.push(field);\n              }\n            });\n            \n            if (missingFields.length > 0) {\n              console.error('缺少必填字段:', missingFields);\n            }\n            \n            // 检查数据类型\n            if (requestData.id && isNaN(Number(requestData.id))) {\n              console.error('ID不是有效的数字');\n            }\n            if (requestData.deptId && isNaN(Number(requestData.deptId))) {\n              console.error('部门ID不是有效的数字');\n            }\n            if (requestData.postId && isNaN(Number(requestData.postId))) {\n              console.error('岗位ID不是有效的数字');\n            }\n          } catch (e) {\n            console.error('解析请求数据失败:', e);\n          }\n        }\n      }\n    } else {\n      console.error('网络错误:', error.message);\n    }\n    \n    let errorMsg = '请求失败';\n    if (error.response && error.response.status) {\n      switch (error.response.status) {\n        case 401:\n          errorMsg = '未授权，请重新登录';\n          // 清除token并返回登录页\n          store.dispatch('user/logout').then(() => {\n            location.reload();\n          });\n          break;\n        case 403:\n          errorMsg = '拒绝访问';\n          break;\n        case 404:\n          errorMsg = '请求的资源不存在';\n          break;\n        case 500:\n          errorMsg = '服务器内部错误';\n          if (error.response.data && error.response.data.message) {\n            errorMsg += ': ' + error.response.data.message;\n          } else if (method.toLowerCase() === 'put' && url.includes('/sysUser')) {\n            errorMsg = '更新用户信息失败，请检查数据格式是否正确';\n          }\n          break;\n        default:\n          errorMsg = error.message || '未知错误';\n      }\n    }\n    \n    ElMessage({\n      message: errorMsg,\n      type: 'error',\n      duration: 5 * 1000\n    });\n    return Promise.reject(error);\n  }\n);\n\nexport default service "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}