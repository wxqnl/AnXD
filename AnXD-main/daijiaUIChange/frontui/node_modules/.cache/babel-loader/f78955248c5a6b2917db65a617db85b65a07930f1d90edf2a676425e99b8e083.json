{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api',\n  // url = base url + request url\n  timeout: 15000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  if (store.state.user.token) {\n    // 让每个请求携带token\n    // 如果后端需要Bearer前缀，取消注释下面这行\n    // config.headers['Authorization'] = 'Bearer ' + getToken()\n\n    // 如果后端不需要Bearer前缀，使用这行\n    config.headers['Authorization'] = getToken();\n    console.log('发送请求携带token:', config.url, config.headers['Authorization']);\n  } else {\n    console.warn('发送请求没有token:', config.url);\n  }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.log(error); // for debug\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 调试信息\n  console.log('API响应:', res);\n\n  // 如果返回的状态码不是200，说明请求异常\n  if (res.code !== 200) {\n    ElMessage({\n      message: res.message || '系统异常',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.code === 401 || res.code === 208) {\n      // 重新登录\n      store.dispatch('user/logout').then(() => {\n        location.reload();\n      });\n    }\n    return Promise.reject(new Error(res.message || '系统异常'));\n  } else {\n    return res;\n  }\n}, error => {\n  console.log('err', error); // for debug\n  console.log('err response:', error.response); // 打印详细错误信息\n\n  let errorMsg = '请求失败';\n  if (error.response && error.response.status) {\n    switch (error.response.status) {\n      case 401:\n        errorMsg = '未授权，请重新登录';\n        // 清除token并返回登录页\n        store.dispatch('user/logout').then(() => {\n          location.reload();\n        });\n        break;\n      case 403:\n        errorMsg = '拒绝访问';\n        break;\n      case 404:\n        errorMsg = '请求的资源不存在';\n        break;\n      case 500:\n        errorMsg = '服务器内部错误';\n        break;\n      default:\n        errorMsg = error.message || '未知错误';\n    }\n  }\n  ElMessage({\n    message: errorMsg,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","store","getToken","service","create","baseURL","timeout","interceptors","request","use","config","state","user","token","headers","console","log","url","warn","error","Promise","reject","response","res","data","code","message","type","duration","dispatch","then","location","reload","Error","errorMsg","status"],"sources":["/Users/apple/Desktop/111111/zongheshixi/daijiaguanli/frontui/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport store from '@/store'\nimport { getToken } from '@/utils/auth'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api', // url = base url + request url\n  timeout: 15000 // 请求超时时间\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    // 在发送请求之前做些什么\n    if (store.state.user.token) {\n      // 让每个请求携带token\n      // 如果后端需要Bearer前缀，取消注释下面这行\n      // config.headers['Authorization'] = 'Bearer ' + getToken()\n      \n      // 如果后端不需要Bearer前缀，使用这行\n      config.headers['Authorization'] = getToken()\n      \n      console.log('发送请求携带token:', config.url, config.headers['Authorization'])\n    } else {\n      console.warn('发送请求没有token:', config.url)\n    }\n    return config\n  },\n  error => {\n    // 对请求错误做些什么\n    console.log(error) // for debug\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n    \n    // 调试信息\n    console.log('API响应:', res)\n    \n    // 如果返回的状态码不是200，说明请求异常\n    if (res.code !== 200) {\n      ElMessage({\n        message: res.message || '系统异常',\n        type: 'error',\n        duration: 5 * 1000\n      })\n      \n      // 401: 未登录或token过期\n      if (res.code === 401 || res.code === 208) {\n        // 重新登录\n        store.dispatch('user/logout').then(() => {\n          location.reload()\n        })\n      }\n      return Promise.reject(new Error(res.message || '系统异常'))\n    } else {\n      return res\n    }\n  },\n  error => {\n    console.log('err', error) // for debug\n    console.log('err response:', error.response) // 打印详细错误信息\n    \n    let errorMsg = '请求失败'\n    if (error.response && error.response.status) {\n      switch (error.response.status) {\n        case 401:\n          errorMsg = '未授权，请重新登录'\n          // 清除token并返回登录页\n          store.dispatch('user/logout').then(() => {\n            location.reload()\n          })\n          break\n        case 403:\n          errorMsg = '拒绝访问'\n          break\n        case 404:\n          errorMsg = '请求的资源不存在'\n          break\n        case 500:\n          errorMsg = '服务器内部错误'\n          break\n        default:\n          errorMsg = error.message || '未知错误'\n      }\n    }\n    \n    ElMessage({\n      message: errorMsg,\n      type: 'error',\n      duration: 5 * 1000\n    })\n    return Promise.reject(error)\n  }\n)\n\nexport default service "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}