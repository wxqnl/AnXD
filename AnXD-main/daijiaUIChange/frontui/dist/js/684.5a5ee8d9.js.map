{"version":3,"file":"js/684.5a5ee8d9.js","mappings":"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","sources":["webpack://daijia-admin/./src/api/dept.js","webpack://daijia-admin/./src/pages/system/SysUser.vue","webpack://daijia-admin/./src/pages/system/SysUser.vue?7da8","webpack://daijia-admin/./src/api/post.js"],"sourcesContent":["import request from '@/utils/request'\n\n// 获取部门列表\nexport function getDeptTree(params) {\n  // 确保必须参数存在\n  const queryParams = {\n    pageSize: params?.pageSize || 10,\n    pageNum: params?.pageNum || 1,\n    ...params\n  }\n  return request({\n    url: '/sysDept/list',\n    method: 'get',\n    params: queryParams\n  })\n}\n\n// 获取部门详情\nexport function getDeptById(id) {\n  return request({\n    url: '/sysDept/getById',\n    method: 'get',\n    params: { id }\n  })\n}\n\n// 添加部门\nexport function addDept(data) {\n  return request({\n    url: '/sysDept/add',\n    method: 'post',\n    data\n  })\n}\n\n// 更新部门\nexport function updateDept(data) {\n  return request({\n    url: '/sysDept/update',\n    method: 'post',\n    data\n  })\n}\n\n// 删除部门\nexport function deleteDept(id) {\n  return request({\n    url: '/sysDept/delete',\n    method: 'post',\n    params: { id }\n  })\n} ","<template>\n  <div class=\"app-container\">\n    <!-- 搜索区域 -->\n    <el-card class=\"search-card\">\n      <el-form :model=\"queryParams\" ref=\"queryForm\" :inline=\"true\" class=\"search-form\">\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"queryParams.username\" placeholder=\"请输入用户名\" clearable />\n        </el-form-item>\n        <el-form-item label=\"姓名\" prop=\"name\">\n          <el-input v-model=\"queryParams.name\" placeholder=\"请输入姓名\" clearable />\n        </el-form-item>\n        <el-form-item label=\"手机号\" prop=\"phone\">\n          <el-input v-model=\"queryParams.phone\" placeholder=\"请输入手机号\" clearable />\n        </el-form-item>\n        <el-form-item label=\"部门\" prop=\"deptName\">\n          <el-input v-model=\"queryParams.deptName\" placeholder=\"请输入部门\" clearable />\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleQuery\">查询</el-button>\n          <el-button @click=\"resetQuery\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n    <!-- 表格工具栏 -->\n    <el-card>\n      <template #header>\n        <div class=\"card-header\">\n          <span>用户列表</span>\n        </div>\n      </template>\n\n      <!-- 表格区域 -->\n      <el-table v-loading=\"loading\" :data=\"userList\" border>\n        <el-table-column type=\"index\" label=\"#\" width=\"50\" />\n        <el-table-column prop=\"username\" label=\"用户名\" />\n        <el-table-column prop=\"name\" label=\"姓名\" />\n        <!-- <el-table-column prop=\"gender\" label=\"性别\">\n          <template #default=\"scope\">\n            {{ scope.row.gender === 1 ? '男' : scope.row.gender === 2 ? '女' : '未知' }}\n          </template>\n        </el-table-column> -->\n        <el-table-column prop=\"phone\" label=\"手机号\" />\n        <el-table-column prop=\"deptName\" label=\"部门\" />\n        <el-table-column prop=\"postName\" label=\"岗位\" />\n        <el-table-column prop=\"status\" label=\"状态\">\n          <template #default=\"scope\">\n            <el-tag :type=\"scope.row.status === 1 ? 'success' : 'danger'\">\n              {{ scope.row.status === 1 ? '正常' : '停用' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"350\">\n          <template #default=\"scope\">\n            <el-button type=\"primary\" link @click=\"handleEdit(scope.row)\">编辑</el-button>\n            <el-button type=\"danger\" link @click=\"handleDelete(scope.row)\">删除</el-button>\n            <el-button type=\"info\" link @click=\"viewLoginLog(scope.row)\">登录日志</el-button>\n            <el-button type=\"warning\" link @click=\"viewOperLog(scope.row)\">操作日志</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页区域 -->\n      <el-pagination\n        v-if=\"total > 0\"\n        v-model:current-page=\"queryParams.pageNum\"\n        v-model:page-size=\"queryParams.pageSize\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"total\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n      />\n    </el-card>\n    \n    <!-- 用户编辑对话框 -->\n    <el-dialog title=\"编辑用户\" v-model=\"dialogVisible\" width=\"500px\">\n      <el-form ref=\"userFormRef\" :model=\"userForm\" :rules=\"rules\" label-width=\"80px\">\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"userForm.username\" placeholder=\"请输入用户名\" disabled />\n        </el-form-item>\n        <el-form-item label=\"姓名\" prop=\"name\">\n          <el-input v-model=\"userForm.name\" placeholder=\"请输入姓名\" />\n        </el-form-item>\n        <el-form-item label=\"手机号\" prop=\"phone\">\n          <el-input v-model=\"userForm.phone\" placeholder=\"请输入手机号\" />\n        </el-form-item>\n        <el-form-item label=\"部门\" prop=\"deptId\">\n          <el-select v-model=\"userForm.deptId\" placeholder=\"请选择部门\">\n            <el-option v-for=\"dept in deptOptions\" :key=\"dept.id\" :label=\"dept.name\" :value=\"dept.id\" />\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"岗位\" prop=\"postId\">\n          <el-select v-model=\"userForm.postId\" placeholder=\"请选择岗位\">\n            <el-option v-for=\"post in postOptions\" :key=\"post.id\" :label=\"post.name\" :value=\"post.id\" />\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"status\">\n          <el-radio-group v-model=\"userForm.status\">\n            <el-radio :label=\"1\">正常</el-radio>\n            <el-radio :label=\"0\">禁用</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item label=\"描述\" prop=\"description\">\n          <el-input v-model=\"userForm.description\" type=\"textarea\" placeholder=\"请输入描述\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <div class=\"dialog-footer\">\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\">确定</el-button>\n        </div>\n      </template>\n    </el-dialog>\n\n    <!-- 登录日志对话框 -->\n    <el-dialog title=\"用户登录日志\" v-model=\"loginLogDialogVisible\" width=\"800px\">\n      <el-table v-loading=\"logLoading\" :data=\"loginLogList\" border>\n        <el-table-column type=\"index\" label=\"#\" width=\"50\" />\n        <el-table-column prop=\"username\" label=\"用户名\" width=\"120\" />\n        <el-table-column prop=\"ipaddr\" label=\"IP地址\" width=\"150\" />\n        <el-table-column prop=\"status\" label=\"状态\" width=\"80\">\n          <template #default=\"scope\">\n            <el-tag :type=\"scope.row.msg && scope.row.msg.includes('成功') ? 'success' : 'danger'\">\n              {{ scope.row.msg && scope.row.msg.includes('成功') ? '成功' : '失败' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"msg\" label=\"消息\" />\n        <el-table-column prop=\"accessTime\" label=\"访问时间\" width=\"180\" />\n      </el-table>\n      <!-- 登录日志分页区域 -->\n      <el-pagination\n        v-if=\"loginLogTotal > 0\"\n        :current-page=\"loginLogQuery.pageNum\"\n        :page-size=\"loginLogQuery.pageSize\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"loginLogTotal\"\n        @size-change=\"handleLogSizeChange\"\n        @current-change=\"handleLogCurrentChange\"\n        class=\"pagination\"\n      />\n    </el-dialog>\n\n    <!-- 操作日志对话框 -->\n    <el-dialog title=\"用户操作日志\" v-model=\"operLogDialogVisible\" width=\"900px\">\n      <el-table v-loading=\"operLogLoading\" :data=\"operLogList\" border>\n        <el-table-column type=\"index\" label=\"#\" width=\"50\" />\n        <el-table-column prop=\"operName\" label=\"操作人\" width=\"120\" />\n        <el-table-column prop=\"deptName\" label=\"部门\" width=\"120\" />\n        <el-table-column prop=\"businessType\" label=\"业务类型\" width=\"100\" />\n        <el-table-column prop=\"operatorType\" label=\"操作类型\" width=\"100\" />\n        <el-table-column prop=\"method\" label=\"请求方法\" width=\"120\" />\n        <el-table-column prop=\"requestMethod\" label=\"HTTP方法\" width=\"100\" />\n        <el-table-column prop=\"status\" label=\"状态\" width=\"80\">\n          <template #default=\"scope\">\n            <el-tag :type=\"(scope.row.status === 0 || (scope.row.msg && scope.row.msg.includes('成功'))) ? 'success' : 'danger'\">\n              {{ (scope.row.status === 0 || (scope.row.msg && scope.row.msg.includes('成功'))) ? '成功' : '失败' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"operTime\" label=\"操作时间\" width=\"180\" />\n      </el-table>\n      <!-- 操作日志分页区域 -->\n      <el-pagination\n        v-if=\"operLogTotal > 0\"\n        :current-page=\"operLogQuery.pageNum\"\n        :page-size=\"operLogQuery.pageSize\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"operLogTotal\"\n        @size-change=\"handleOperLogSizeChange\"\n        @current-change=\"handleOperLogCurrentChange\"\n        class=\"pagination\"\n      />\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from 'vue'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { getAllUsers, updateUser, deleteUser, getUserById, getUserLoginLog, getUserOperLog } from '@/api/user'\nimport { getDeptTree } from '@/api/dept'\nimport { getPostList } from '@/api/post'\n\n// 查询参数\nconst queryParams = reactive({\n  pageNum: 1,\n  pageSize: 10,\n  username: undefined,\n  name: undefined,\n  phone: undefined,\n  deptId: undefined,\n  postId: undefined,\n  status: undefined,\n  deptName: undefined,\n  postName: undefined,\n})\n\n// 表格数据和加载状态\nconst userList = ref([])\nconst loading = ref(false)\nconst total = ref(0)\n\n// 部门和岗位选项\nconst deptOptions = ref([])\nconst postOptions = ref([])\n\n// 编辑对话框相关\nconst dialogVisible = ref(false)\nconst userFormRef = ref(null)\nconst userForm = reactive({\n  id: '',\n  username: '',\n  name: '',\n  phone: '',\n  deptId: undefined,\n  postId: undefined,\n  status: 1,\n  description: ''\n})\n\n// 登录日志相关\nconst loginLogDialogVisible = ref(false)\nconst loginLogList = ref([])\nconst loginLogTotal = ref(0)\nconst logLoading = ref(false)\nconst loginLogQuery = reactive({\n  pageNum: 1,\n  pageSize: 10,\n  username: '',\n  minAccessTime: undefined,\n  maxAccessTime: undefined\n})\n\n// 操作日志相关\nconst operLogDialogVisible = ref(false)\nconst operLogList = ref([])\nconst operLogTotal = ref(0)\nconst operLogLoading = ref(false)\nconst operLogQuery = reactive({\n  pageNum: 1,\n  pageSize: 10,\n  operName: '',\n  deptName: '',\n  status: undefined,\n  operatorType: undefined,\n  businessType: undefined,\n  requestMethod: undefined,\n  minOperTime: undefined,\n  maxOperTime: undefined\n})\n\n// 表单验证规则\nconst rules = {\n  name: [\n    { required: true, message: '请输入姓名', trigger: 'blur' }\n  ],\n  phone: [\n    { required: true, message: '请输入手机号', trigger: 'blur' },\n    { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号', trigger: 'blur' }\n  ]\n}\n\n// 查询用户列表\nconst getList = async () => {\n  try {\n    loading.value = true\n    const res = await getAllUsers(queryParams)\n    console.log('用户列表响应:', res)\n    \n    // 获取原始用户列表\n    const items = res.data.items || []\n    \n    // 将部门ID和岗位ID转换为对应的名称\n    userList.value = items.map(user => {\n      // 准备显示数据\n      const displayUser = { ...user }\n      \n      // 如果没有部门名称，尝试从部门选项中获取\n      if (!displayUser.deptName && displayUser.deptId && deptOptions.value.length > 0) {\n        const dept = deptOptions.value.find(d => d.id == displayUser.deptId)\n        if (dept) {\n          displayUser.deptName = dept.name\n        }\n      }\n      \n      // 如果没有岗位名称，尝试从岗位选项中获取\n      if (!displayUser.postName && displayUser.postId && postOptions.value.length > 0) {\n        const post = postOptions.value.find(p => p.id == displayUser.postId)\n        if (post) {\n          displayUser.postName = post.name\n        }\n      }\n      \n      return displayUser\n    })\n    \n    total.value = res.data.total || 0\n    \n    // 如果部门和岗位下拉选项尚未加载，主动加载它们\n    if (deptOptions.value.length === 0 || postOptions.value.length === 0) {\n      await Promise.all([\n        getDeptOptions(),\n        getPostOptions()\n      ])\n      \n      // 重新处理用户列表以添加部门和岗位名称\n      userList.value = userList.value.map(user => {\n        const updatedUser = { ...user }\n        \n        if (!updatedUser.deptName && updatedUser.deptId) {\n          const dept = deptOptions.value.find(d => d.id == updatedUser.deptId)\n          if (dept) {\n            updatedUser.deptName = dept.name\n          }\n        }\n        \n        if (!updatedUser.postName && updatedUser.postId) {\n          const post = postOptions.value.find(p => p.id == updatedUser.postId)\n          if (post) {\n            updatedUser.postName = post.name\n          }\n        }\n        \n        return updatedUser\n      })\n    }\n  } catch (error) {\n    console.error('获取用户列表失败', error)\n    ElMessage.error('获取用户列表失败: ' + (error.message || '未知错误'))\n  } finally {\n    loading.value = false\n  }\n}\n\n// 查询按钮\nconst handleQuery = () => {\n  queryParams.pageNum = 1\n  getList()\n}\n\n// 重置查询\nconst resetQuery = () => {\n  // 重置查询表单\n  queryParams.username = undefined\n  queryParams.name = undefined\n  queryParams.phone = undefined\n  queryParams.deptName = undefined\n  queryParams.pageNum = 1\n  getList()\n}\n\n// 编辑用户\nconst handleEdit = async (row) => {\n  try {\n    console.log('开始编辑用户:', row);\n    \n    // 获取该用户的完整信息，确保有所有字段\n    if (row.id) {\n      // 可能需要先通过ID获取完整用户信息\n      const userDetail = await getUserById(row.id);\n      console.log('获取用户详细信息:', userDetail);\n      \n      if (userDetail) {\n        // 填充表单数据\n        userForm.id = userDetail.id || row.id;\n        userForm.username = userDetail.username || row.username;\n        userForm.name = userDetail.name || row.name;\n        userForm.phone = userDetail.phone || row.phone;\n        userForm.deptId = userDetail.deptId || row.deptId;\n        userForm.postId = userDetail.postId || row.postId;\n        userForm.status = userDetail.status !== undefined ? userDetail.status : row.status || 1;\n        userForm.description = userDetail.description || row.description || '';\n        // 保留可能需要的其他字段\n        userForm.password = userDetail.password || '';\n        userForm.headUrl = userDetail.headUrl || '';\n      } else {\n        // 如果获取详情失败，使用行数据填充\n        Object.keys(userForm).forEach(key => {\n          if (row[key] !== undefined) {\n            userForm[key] = row[key];\n          }\n        });\n      }\n    } else {\n      // 没有ID，直接使用行数据\n      Object.keys(userForm).forEach(key => {\n        if (row[key] !== undefined) {\n          userForm[key] = row[key];\n        }\n      });\n    }\n    \n    // 显示对话框\n    dialogVisible.value = true;\n    \n    // 获取部门和岗位选项\n    try {\n      await Promise.all([\n        getDeptOptions(),\n        getPostOptions()\n      ]);\n    } catch (error) {\n      console.error('获取选项数据失败', error);\n      // 即使获取选项失败也继续显示对话框\n    }\n  } catch (error) {\n    console.error('编辑用户时出错:', error);\n    ElMessage.error('打开编辑对话框失败: ' + (error.message || '未知错误'));\n  }\n}\n\n// 删除用户\nconst handleDelete = (row) => {\n  ElMessageBox.confirm(`确定要删除用户 ${row.username} 吗?`, '提示', {\n    confirmButtonText: '确定',\n    cancelButtonText: '取消',\n    type: 'warning'\n  }).then(async () => {\n    try {\n      await deleteUser(row.id)\n      ElMessage.success('删除成功')\n      getList()\n    } catch (error) {\n      ElMessage.error('删除失败')\n    }\n  }).catch(() => {})\n}\n\n// 获取部门选项\nconst getDeptOptions = async () => {\n  try {\n    const res = await getDeptTree()\n    console.log('获取部门选项响应:', res)\n    \n    // 处理不同的数据格式\n    if (res.data && res.data.items) {\n      // 如果是分页格式\n      deptOptions.value = flattenDeptTree(buildDeptTree(res.data.items))\n    } else if (res.data && Array.isArray(res.data)) {\n      // 如果直接是数组格式\n      deptOptions.value = flattenDeptTree(res.data)\n    } else {\n      console.warn('未识别的部门数据格式')\n      deptOptions.value = []\n    }\n  } catch (error) {\n    console.error('获取部门选项失败', error)\n    ElMessage.warning('获取部门选项失败，请稍后再试')\n    deptOptions.value = []\n  }\n}\n\n// 构建部门树结构\nconst buildDeptTree = (depts) => {\n  // 创建映射表\n  const deptMap = {}\n  depts.forEach(dept => {\n    dept.children = []\n    deptMap[dept.id] = dept\n  })\n  \n  // 构建树结构\n  const result = []\n  depts.forEach(dept => {\n    if (dept.parentId && deptMap[dept.parentId]) {\n      deptMap[dept.parentId].children.push(dept)\n    } else {\n      result.push(dept)\n    }\n  })\n  \n  return result\n}\n\n// 扁平化部门树结构\nconst flattenDeptTree = (deptTree) => {\n  if (!deptTree || !Array.isArray(deptTree)) {\n    console.warn('部门树结构无效', deptTree)\n    return []\n  }\n  \n  const result = []\n  const flatten = (items) => {\n    items.forEach(item => {\n      if (item && item.id) {\n        result.push({\n          id: item.id,\n          name: item.name\n        })\n        if (item.children && item.children.length > 0) {\n          flatten(item.children)\n        }\n      }\n    })\n  }\n  flatten(deptTree)\n  return result\n}\n\n// 获取岗位选项\nconst getPostOptions = async () => {\n  try {\n    // 使用默认的分页参数\n    const params = {\n      pageSize: 100,\n      pageNum: 1\n    }\n    \n    const res = await getPostList(params)\n    console.log('获取岗位选项响应:', res)\n    \n    // 处理不同的数据格式\n    if (res.data && res.data.items) {\n      // 分页格式\n      postOptions.value = (res.data.items || []).map(item => ({\n        id: item.id,\n        name: item.name\n      }))\n    } else if (res.data && Array.isArray(res.data)) {\n      // 直接是数组格式\n      postOptions.value = res.data.map(item => ({\n        id: item.id,\n        name: item.name\n      }))\n    } else {\n      console.warn('未识别的岗位数据格式')\n      postOptions.value = []\n    }\n  } catch (error) {\n    console.error('获取岗位选项失败', error)\n    ElMessage.warning('获取岗位选项失败，请稍后再试')\n    postOptions.value = []\n  }\n}\n\n// 提交表单\nconst submitForm = () => {\n  userFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        console.log('提交前的用户表单数据:', userForm);\n        \n        // 直接使用完整的userForm数据\n        const result = await updateUser(userForm);\n        console.log('更新用户返回结果:', result);\n        \n        // 根据后端返回的boolean判断结果\n        if (result === true) {\n          ElMessage.success('更新成功');\n          dialogVisible.value = false;\n          getList(); // 刷新列表\n        } else {\n          throw new Error('服务器返回失败状态');\n        }\n      } catch (error) {\n        console.error('更新用户失败:', error);\n        ElMessage.error('更新失败: ' + (error.message || '未知错误'));\n      }\n    }\n  });\n}\n\n// 分页操作\nconst handleSizeChange = (size) => {\n  queryParams.pageSize = size\n  getList()\n}\n\nconst handleCurrentChange = (page) => {\n  queryParams.pageNum = page\n  getList()\n}\n\n// 查看登录日志\nconst viewLoginLog = async (row) => {\n  try {\n    // 清空之前的日志数据，避免渲染错误\n    loginLogList.value = [];\n    loginLogTotal.value = 0;\n    \n    // 然后显示对话框\n    loginLogDialogVisible.value = true;\n    logLoading.value = true;\n    \n    // 显示对话框后再加载日志，以便用户看到加载状态\n    loginLogQuery.username = row.username;\n    loginLogQuery.pageNum = 1;\n    loginLogQuery.pageSize = 10;\n    console.log('准备查询用户登录日志:', row.username);\n    \n    // 使用setTimeout延迟执行，避免渲染冲突\n    setTimeout(async () => {\n      try {\n        await getLoginLogList();\n      } catch (err) {\n        console.error('加载登录日志失败:', err);\n        ElMessage.error('加载日志数据出错');\n      } finally {\n        logLoading.value = false;\n      }\n    }, 100);\n  } catch (error) {\n    console.error('显示登录日志对话框失败:', error);\n    ElMessage.error('无法加载登录日志');\n    loginLogDialogVisible.value = false;\n    logLoading.value = false;\n  }\n}\n\n// 获取登录日志列表\nconst getLoginLogList = async () => {\n  try {\n    console.log('发送登录日志查询参数:', loginLogQuery);\n    \n    // 简化请求参数\n    const simplifiedParams = {\n      pageNum: loginLogQuery.pageNum,\n      pageSize: loginLogQuery.pageSize,\n      username: loginLogQuery.username\n    };\n    \n    const res = await getUserLoginLog(simplifiedParams);\n    console.log('登录日志响应:', res);\n    \n    // 处理响应\n    if (res && res.data) {\n      // 确保数据为数组格式\n      const items = Array.isArray(res.data.items) ? res.data.items : [];\n      \n      // 调试每条日志记录\n      if (items.length > 0) {\n        console.log('日志详细结构示例:', items[0]);\n        console.log('所有日志状态值:');\n        items.forEach((log, index) => {\n          console.log(`日志 ${index+1} - status: ${log.status}, msg: ${log.msg}`);\n        });\n      }\n      \n      loginLogList.value = items;\n      loginLogTotal.value = res.data.total || 0;\n      \n      if (loginLogList.value.length === 0) {\n        ElMessage.info('该用户没有登录日志记录');\n      }\n    } else {\n      loginLogList.value = [];\n      loginLogTotal.value = 0;\n      ElMessage.info('未获取到日志数据');\n    }\n  } catch (error) {\n    console.error('获取登录日志失败', error);\n    ElMessage.error('获取登录日志出错: ' + (error.message || '未知错误'));\n    loginLogList.value = [];\n    loginLogTotal.value = 0;\n  }\n}\n\n// 登录日志分页操作\nconst handleLogSizeChange = (size) => {\n  loginLogQuery.pageSize = size;\n  logLoading.value = true;\n  // 重新获取日志数据\n  getLoginLogList().finally(() => {\n    logLoading.value = false;\n  });\n}\n\nconst handleLogCurrentChange = (page) => {\n  loginLogQuery.pageNum = page;\n  logLoading.value = true;\n  // 重新获取日志数据\n  getLoginLogList().finally(() => {\n    logLoading.value = false;\n  });\n}\n\n// 查看操作日志\nconst viewOperLog = async (row) => {\n  try {\n    // 清空之前的日志数据，避免渲染错误\n    operLogList.value = [];\n    operLogTotal.value = 0;\n    \n    // 然后显示对话框\n    operLogDialogVisible.value = true;\n    operLogLoading.value = true;\n    \n    // 显示对话框后再加载日志\n    operLogQuery.operName = row.username;\n    operLogQuery.pageNum = 1;\n    operLogQuery.pageSize = 10;\n    console.log('准备查询用户操作日志:', row.username);\n    \n    // 使用setTimeout延迟执行，避免渲染冲突\n    setTimeout(async () => {\n      try {\n        await getOperLogList();\n      } catch (err) {\n        console.error('加载操作日志失败:', err);\n        ElMessage.error('加载日志数据出错');\n      } finally {\n        operLogLoading.value = false;\n      }\n    }, 100);\n  } catch (error) {\n    console.error('显示操作日志对话框失败:', error);\n    ElMessage.error('无法加载操作日志');\n    operLogDialogVisible.value = false;\n    operLogLoading.value = false;\n  }\n}\n\n// 获取操作日志列表\nconst getOperLogList = async () => {\n  try {\n    console.log('发送操作日志查询参数:', operLogQuery);\n    \n    // 简化请求参数\n    const simplifiedParams = {\n      pageNum: operLogQuery.pageNum,\n      pageSize: operLogQuery.pageSize,\n      operName: operLogQuery.operName\n    };\n    \n    const res = await getUserOperLog(simplifiedParams);\n    console.log('操作日志响应:', res);\n    \n    // 处理响应\n    if (res && res.data) {\n      // 确保数据为数组格式\n      const items = Array.isArray(res.data.items) ? res.data.items : [];\n      operLogList.value = items;\n      operLogTotal.value = res.data.total || 0;\n      \n      if (operLogList.value.length === 0) {\n        ElMessage.info('该用户没有操作日志记录');\n      }\n    } else {\n      operLogList.value = [];\n      operLogTotal.value = 0;\n      ElMessage.info('未获取到日志数据');\n    }\n  } catch (error) {\n    console.error('获取操作日志失败', error);\n    ElMessage.error('获取操作日志出错: ' + (error.message || '未知错误'));\n    operLogList.value = [];\n    operLogTotal.value = 0;\n  }\n}\n\n// 操作日志分页操作\nconst handleOperLogSizeChange = (size) => {\n  operLogQuery.pageSize = size;\n  operLogLoading.value = true;\n  // 重新获取日志数据\n  getOperLogList().finally(() => {\n    operLogLoading.value = false;\n  });\n}\n\nconst handleOperLogCurrentChange = (page) => {\n  operLogQuery.pageNum = page;\n  operLogLoading.value = true;\n  // 重新获取日志数据\n  getOperLogList().finally(() => {\n    operLogLoading.value = false;\n  });\n}\n\n// 页面加载时获取数据\nonMounted(async () => {\n  try {\n    // 先加载部门和岗位选项\n    await Promise.all([\n      getDeptOptions(),\n      getPostOptions()\n    ]);\n    \n    // 然后加载用户列表\n    await getList();\n  } catch (error) {\n    console.error('页面初始化失败:', error);\n    ElMessage.error('加载数据失败，请刷新页面重试');\n  }\n});\n</script>\n\n<style scoped>\n.app-container {\n  padding: 20px;\n}\n\n.search-card {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.search-form {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.el-pagination {\n  margin-top: 20px;\n  text-align: right;\n}\n\n.pagination {\n  margin-top: 15px;\n  text-align: right;\n}\n</style> ","import script from \"./SysUser.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SysUser.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SysUser.vue?vue&type=style&index=0&id=ba74bdf2&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-ba74bdf2\"]])\n\nexport default __exports__","import request from '@/utils/request'\n\n// 获取岗位列表\nexport function getPostList(params) {\n  return request({\n    url: '/sysPost/list',\n    method: 'get',\n    params\n  })\n}\n\n// 获取岗位详情\nexport function getPostById(id) {\n  return request({\n    url: '/sysPost/getById',\n    method: 'get',\n    params: { id }\n  })\n}\n\n// 添加岗位\nexport function addPost(data) {\n  return request({\n    url: '/sysPost/add',\n    method: 'post',\n    data\n  })\n}\n\n// 更新岗位\nexport function updatePost(data) {\n  return request({\n    url: '/sysPost/update',\n    method: 'post',\n    data\n  })\n}\n\n// 删除岗位\nexport function deletePost(id) {\n  return request({\n    url: '/sysPost/delete',\n    method: 'post',\n    params: { id }\n  })\n}"],"names":["getDeptTree","params","queryParams","pageSize","pageNum","request","url","method","getDeptById","id","addDept","data","updateDept","deleteDept","reactive","username","undefined","name","phone","deptId","postId","status","deptName","postName","userList","ref","loading","total","deptOptions","postOptions","dialogVisible","userFormRef","userForm","description","loginLogDialogVisible","loginLogList","loginLogTotal","logLoading","loginLogQuery","minAccessTime","maxAccessTime","operLogDialogVisible","operLogList","operLogTotal","operLogLoading","operLogQuery","operName","operatorType","businessType","requestMethod","minOperTime","maxOperTime","rules","required","message","trigger","pattern","getList","async","value","res","getAllUsers","console","log","items","map","user","displayUser","length","dept","find","d","post","p","Promise","all","getDeptOptions","getPostOptions","updatedUser","error","ElMessage","handleQuery","resetQuery","handleEdit","row","userDetail","getUserById","password","headUrl","Object","keys","forEach","key","handleDelete","ElMessageBox","confirm","confirmButtonText","cancelButtonText","type","then","deleteUser","success","catch","flattenDeptTree","buildDeptTree","Array","isArray","warn","warning","depts","deptMap","children","result","parentId","push","deptTree","flatten","item","getPostList","submitForm","validate","valid","updateUser","Error","handleSizeChange","size","handleCurrentChange","page","viewLoginLog","setTimeout","getLoginLogList","err","simplifiedParams","getUserLoginLog","index","msg","info","handleLogSizeChange","finally","handleLogCurrentChange","viewOperLog","getOperLogList","getUserOperLog","handleOperLogSizeChange","handleOperLogCurrentChange","onMounted","__exports__","getPostById","addPost","updatePost","deletePost"],"sourceRoot":""}