{"version":3,"file":"js/829.66c4fed7.js","mappings":"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","sources":["webpack://daijia-admin/./src/api/order.js","webpack://daijia-admin/./src/pages/order/OrderInfo.vue","webpack://daijia-admin/./src/pages/order/OrderInfo.vue?abda"],"sourcesContent":["import request from '@/utils/request'\n\n// ========== 订单相关接口 ==========\n\n// 获取订单列表\nexport function getOrderList(params) {\n  return request({\n    url: '/order/getOrderInfo',\n    method: 'post',\n    params\n  })\n}\n\n// 获取订单详情\nexport function getOrderByOrderNo(orderNo) {\n  return request({\n    url: '/order/getByOrderNo',\n    method: 'post',\n    params: { orderNo }\n  })\n}\n\n// 创建订单\nexport function createOrder(data) {\n  return request({\n    url: '/order/add',\n    method: 'post',\n    data\n  })\n}\n\n// 更新订单\nexport function updateOrder(data) {\n  return request({\n    url: '/order/update',\n    method: 'post',\n    data\n  })\n}\n\n// 删除订单\nexport function deleteOrder(orderNo) {\n  return request({\n    url: '/order/delete',\n    method: 'post',\n    params: { orderNo }\n  })\n}\n\n// ========== 订单评价相关接口 ==========\n\n// 获取订单评价列表\nexport function getOrderCommentList(params) {\n  return request({\n    url: '/orderComment/list',\n    method: 'post',\n    params\n  })\n}\n\n// 根据订单ID获取评价\nexport function getCommentByOrderId(orderId) {\n  return request({\n    url: '/orderComment/getByOrderId',\n    method: 'get',\n    params: { orderId }\n  })\n}\n\n// 添加订单评价\nexport function addComment(data) {\n  return request({\n    url: '/orderComment/add',\n    method: 'post',\n    data\n  })\n}\n\n// 更新订单评价\nexport function updateComment(data) {\n  return request({\n    url: '/orderComment/update',\n    method: 'post',\n    data\n  })\n}\n\n// 删除订单评价\nexport function deleteComment(orderId) {\n  return request({\n    url: '/orderComment/delete',\n    method: 'post',\n    params: { orderId }\n  })\n}\n\n// 获取订单反馈信息\nexport function getOrderFeedback(orderId) {\n  return request({\n    url: '/feedback/getFeed',\n    method: 'get',\n    params: { orderId }\n  })\n} ","<template>\n  <div class=\"app-container\">\n    <el-card class=\"search-card\">\n      <el-form :model=\"queryParams\" ref=\"queryForm\" :inline=\"true\" class=\"search-form\">\n        <el-form-item label=\"订单号\" prop=\"orderNo\">\n          <el-input v-model=\"queryParams.orderNo\" placeholder=\"请输入订单号\" clearable />\n        </el-form-item>\n        <el-form-item label=\"客户姓名\" prop=\"customerName\">\n          <el-input v-model=\"queryParams.customerName\" placeholder=\"请输入客户姓名\" clearable />\n        </el-form-item>\n        <el-form-item label=\"司机姓名\" prop=\"driverName\">\n          <el-input v-model=\"queryParams.driverName\" placeholder=\"请输入司机姓名\" clearable />\n        </el-form-item>\n        <el-form-item label=\"订单状态\" prop=\"status\">\n          <el-select v-model=\"queryParams.status\" placeholder=\"请选择订单状态\" clearable>\n            <el-option label=\"待接单\" :value=\"1\" />\n            <el-option label=\"已接单\" :value=\"2\" />\n            <el-option label=\"进行中\" :value=\"3\" />\n            <el-option label=\"已完成\" :value=\"4\" />\n            <el-option label=\"已取消\" :value=\"5\" />\n          </el-select>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleQuery\">查询</el-button>\n          <el-button @click=\"resetQuery\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n    <el-card>\n      <template #header>\n        <div class=\"card-header\">\n          <span>订单列表</span>\n        </div>\n      </template>\n      \n      <el-table v-loading=\"loading\" :data=\"orderList\" border>\n        <el-table-column type=\"index\" label=\"#\" width=\"50\" />\n        <el-table-column prop=\"orderNo\" label=\"订单号\" width=\"180\" />\n        <el-table-column prop=\"customerName\" label=\"客户名称\" />\n        <el-table-column prop=\"driverName\" label=\"司机名称\" />\n        <el-table-column prop=\"startLocation\" label=\"起始地点\" show-overflow-tooltip />\n        <el-table-column prop=\"endLocation\" label=\"结束地点\" show-overflow-tooltip />\n        <el-table-column label=\"订单金额\">\n          <template #default=\"scope\">\n            <span v-if=\"scope.row.realAmount\">¥{{ scope.row.realAmount }}</span>\n            <span v-else-if=\"scope.row.expectAmount\">¥{{ scope.row.expectAmount }} (预估)</span>\n            <span v-else>-</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"接单时间\" width=\"160\">\n          <template #default=\"scope\">\n            {{ scope.row.acceptTime || '-' }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"status\" label=\"订单状态\">\n          <template #default=\"scope\">\n            <el-tag :type=\"getStatusType(scope.row.status)\">\n              {{ getStatusText(scope.row.status) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"160\">\n          <template #default=\"scope\">\n            <el-button type=\"primary\" link @click=\"handleDetail(scope.row)\">详情</el-button>\n            <el-button type=\"success\" link @click=\"handleStatus(scope.row)\" v-if=\"scope.row.status < 4\">修改状态</el-button>\n            <el-button type=\"info\" link @click=\"handleFeedback(scope.row)\">查看反馈</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      \n      <el-pagination\n        v-if=\"total > 0\"\n        v-model:current-page=\"queryParams.pageNum\"\n        v-model:page-size=\"queryParams.pageSize\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"total\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n      />\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from 'vue'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { getOrderList, getOrderByOrderNo, updateOrder, getOrderFeedback } from '@/api/order'\n\n// 查询参数\nconst queryParams = reactive({\n  pageNum: 1,\n  pageSize: 10,\n  orderNo: '',\n  customerName: '',\n  driverName: '',\n  status: undefined\n})\n\n// 表格数据和状态\nconst orderList = ref([])\nconst loading = ref(false)\nconst total = ref(0)\n\n// 获取订单列表\nconst getList = async () => {\n  try {\n    loading.value = true\n    const res = await getOrderList(queryParams)\n    console.log('订单列表响应:', res)\n    orderList.value = res.data.items || []\n    total.value = res.data.total || 0\n  } catch (error) {\n    console.error('获取订单列表失败', error)\n  } finally {\n    loading.value = false\n  }\n}\n\n// 查询按钮\nconst handleQuery = () => {\n  queryParams.pageNum = 1\n  getList()\n}\n\n// 重置查询\nconst resetQuery = () => {\n  queryParams.orderNo = ''\n  queryParams.customerName = ''\n  queryParams.driverName = ''\n  queryParams.status = undefined\n  queryParams.pageNum = 1\n  getList()\n}\n\n// 获取订单状态文本\nconst getStatusText = (status) => {\n  const statusMap = {\n    1: '等待接单',\n    2: '已接单',\n    3: '司机已到达',\n    4: '开始代驾',\n    5: '结束代驾',\n    6: '未付款',\n    7: '已付款',\n    8: '订单已结束',\n    9: '顾客撤单',\n    10: '司机撤单',\n    11: '事故关闭',\n    12: '其他'\n  }\n  return statusMap[status] || '未知'\n}\n\n// 获取订单状态对应的标签类型\nconst getStatusType = (status) => {\n  const typeMap = {\n    1: 'info',      // 等待接单\n    2: 'warning',   // 已接单\n    3: 'warning',   // 司机已到达\n    4: 'primary',   // 开始代驾\n    5: 'primary',   // 结束代驾\n    6: 'danger',    // 未付款\n    7: 'success',   // 已付款\n    8: 'success',   // 订单已结束\n    9: 'danger',    // 顾客撤单\n    10: 'danger',   // 司机撤单\n    11: 'danger',   // 事故关闭\n    12: 'info'      // 其他\n  }\n  return typeMap[status] || ''\n}\n\n// 查看订单详情\nconst handleDetail = async (row) => {\n  try {\n    loading.value = true\n    const res = await getOrderByOrderNo(row.orderNo)\n    if (res.data) {\n      const order = res.data\n      // 展示详情对话框\n      ElMessageBox.alert(\n        `<div class=\"order-detail\">\n          <p><strong>订单号：</strong>${order.orderNo || '暂无'}</p>\n          <p><strong>客户ID：</strong>${order.customerId || '暂无'}</p>\n          <p><strong>司机ID：</strong>${order.driverId || '暂无'}</p>\n          <p><strong>起始地点：</strong>${order.startLocation || '暂无'}</p>\n          <p><strong>结束地点：</strong>${order.endLocation || '暂无'}</p>\n          <p><strong>预估金额：</strong>${order.expectAmount ? '¥' + order.expectAmount : '暂无'}</p>\n          <p><strong>实际金额：</strong>${order.realAmount ? '¥' + order.realAmount : '暂无'}</p>\n          <p><strong>预估里程：</strong>${order.expectDistance ? order.expectDistance + 'km' : '暂无'}</p>\n          <p><strong>实际里程：</strong>${order.realDistance ? order.realDistance + 'km' : '暂无'}</p>\n          <p><strong>订单状态：</strong>${getStatusText(order.status) || '暂无'}</p>\n          <p><strong>接单时间：</strong>${order.acceptTime || '暂无'}</p>\n          <p><strong>开始时间：</strong>${order.startServiceTime || '暂无'}</p>\n          <p><strong>结束时间：</strong>${order.endServiceTime || '暂无'}</p>\n          <p><strong>支付时间：</strong>${order.payTime || '暂无'}</p>\n          <p><strong>车牌号：</strong>${order.carLicense || '暂无'}</p>\n          <p><strong>车型：</strong>${order.carType || '暂无'}</p>\n          <p><strong>备注：</strong>${order.remark || '暂无'}</p>\n        </div>`,\n        '订单详情',\n        {\n          dangerouslyUseHTMLString: true,\n          confirmButtonText: '确定'\n        }\n      )\n    } else {\n      ElMessage.warning('未找到该订单详情')\n    }\n  } catch (error) {\n    console.error('获取订单详情失败', error)\n    ElMessage.error('获取订单详情失败')\n  } finally {\n    loading.value = false\n  }\n}\n\n// 修改订单状态\nconst handleStatus = (row) => {\n  // 定义一个临时状态变量\n  const newStatus = ref(row.status === 1 ? 2 : row.status === 2 ? 3 : row.status === 3 ? 4 : 5);\n  \n  ElMessageBox.prompt('请输入新的订单状态 (1=待接单, 2=已接单, 3=进行中, 4=已完成, 5=已取消)', '修改订单状态', {\n    confirmButtonText: '确定',\n    cancelButtonText: '取消',\n    inputValue: newStatus.value,\n    inputValidator: (value) => {\n      const num = parseInt(value);\n      return (num >= 1 && num <= 5) ? true : '请输入1-5之间的数字';\n    }\n  }).then(({ value }) => {\n    const statusNum = parseInt(value);\n    updateOrder({\n      ...row,\n      status: statusNum\n    }).then(() => {\n      ElMessage.success('状态修改成功');\n      getList();\n    }).catch(error => {\n      ElMessage.error('状态修改失败');\n    });\n  }).catch(() => {\n    // 取消操作\n  });\n}\n\n// 查看订单反馈\nconst handleFeedback = async (row) => {\n  try {\n    // 使用订单号查询详细信息\n    const orderDetail = await getOrderByOrderNo(row.orderNo)\n    if (!orderDetail.data) {\n      ElMessage.error('无法获取订单详情')\n      return\n    }\n    \n    // 从订单详情中获取ID (在你的示例中，可能是customerId，根据实际接口调整)\n    // 由于反馈接口需要orderId，我们尝试使用多个可能的ID字段\n    const orderId = orderDetail.data.id || orderDetail.data.orderId || orderDetail.data.customerId\n    \n    if (!orderId) {\n      ElMessage.error('无法获取有效的订单ID')\n      return\n    }\n    \n    console.log('使用订单ID查询反馈:', orderId)\n    const res = await getOrderFeedback(orderId)\n    \n    if (res.data) {\n      ElMessageBox.alert(res.data, '订单反馈', {\n        confirmButtonText: '确定'\n      })\n    } else {\n      ElMessage.info('该订单暂无反馈信息')\n    }\n  } catch (error) {\n    console.error('获取订单反馈失败', error)\n    ElMessage.error('获取订单反馈失败: ' + (error.message || '未知错误'))\n  }\n}\n\n// 分页操作\nconst handleSizeChange = (size) => {\n  queryParams.pageSize = size\n  getList()\n}\n\nconst handleCurrentChange = (page) => {\n  queryParams.pageNum = page\n  getList()\n}\n\n// 页面加载时获取数据\nonMounted(() => {\n  getList()\n})\n</script>\n\n<style scoped>\n.app-container {\n  padding: 20px;\n}\n\n.search-card {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.el-pagination {\n  margin-top: 20px;\n  text-align: right;\n}\n\n/* 订单详情样式 */\n:deep(.order-detail) {\n  text-align: left;\n  line-height: 1.8;\n}\n\n:deep(.order-detail p) {\n  margin: 5px 0;\n}\n\n:deep(.order-detail strong) {\n  display: inline-block;\n  width: 90px;\n  font-weight: bold;\n}\n</style> ","import script from \"./OrderInfo.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./OrderInfo.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./OrderInfo.vue?vue&type=style&index=0&id=2e7b931c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-2e7b931c\"]])\n\nexport default __exports__"],"names":["getOrderList","params","request","url","method","getOrderByOrderNo","orderNo","updateOrder","data","getOrderCommentList","getCommentByOrderId","orderId","updateComment","getOrderFeedback","queryParams","reactive","pageNum","pageSize","customerName","driverName","status","undefined","orderList","ref","loading","total","getList","async","value","res","console","log","items","error","handleQuery","resetQuery","getStatusText","statusMap","getStatusType","typeMap","handleDetail","row","order","ElMessageBox","alert","customerId","driverId","startLocation","endLocation","expectAmount","realAmount","expectDistance","realDistance","acceptTime","startServiceTime","endServiceTime","payTime","carLicense","carType","remark","dangerouslyUseHTMLString","confirmButtonText","ElMessage","warning","handleStatus","newStatus","prompt","cancelButtonText","inputValue","inputValidator","num","parseInt","then","statusNum","success","catch","handleFeedback","orderDetail","id","info","message","handleSizeChange","size","handleCurrentChange","page","onMounted","__exports__"],"sourceRoot":""}