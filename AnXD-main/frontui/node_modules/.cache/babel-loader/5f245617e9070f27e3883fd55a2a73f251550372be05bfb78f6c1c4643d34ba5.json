{"ast":null,"code":"import request from '@/utils/request';\n\n// 获取部门树 - 使用getById代替list，避免500错误\nexport function getDeptTree(params) {\n  // 首先获取根部门\n  return request({\n    url: '/sysDept/getById',\n    method: 'get',\n    params: {\n      id: 1\n    }\n  }).then(async response => {\n    console.log('获取到根部门:', response);\n\n    // 如果获取到根部门\n    if (response.data) {\n      // 创建部门数组\n      const deptArray = [response.data];\n\n      // 尝试获取一些常见ID的部门（2-10），扩充部门列表\n      try {\n        for (let i = 2; i <= 10; i++) {\n          try {\n            const childResponse = await request({\n              url: '/sysDept/getById',\n              method: 'get',\n              params: {\n                id: i\n              }\n            });\n            if (childResponse.data) {\n              deptArray.push(childResponse.data);\n            }\n          } catch (e) {\n            console.log(`部门ID=${i}不存在`);\n          }\n        }\n      } catch (e) {\n        console.warn('获取子部门失败', e);\n      }\n\n      // 构建部门树结构\n      const buildDeptTree = depts => {\n        // 创建一个映射表\n        const deptMap = {};\n        depts.forEach(dept => {\n          dept.children = [];\n          deptMap[dept.id] = dept;\n        });\n\n        // 构建树结构\n        const result = [];\n        depts.forEach(dept => {\n          if (dept.parentId && deptMap[dept.parentId]) {\n            // 如果有父节点，添加到父节点的children中\n            deptMap[dept.parentId].children.push(dept);\n          } else {\n            // 没有父节点或父节点不在列表中，作为根节点\n            result.push(dept);\n          }\n        });\n        return result;\n      };\n\n      // 返回构建好的树结构\n      response.data = buildDeptTree(deptArray);\n      console.log('构建的部门树结构:', response.data);\n    }\n    return response;\n  });\n}\n\n// 获取部门详情\nexport function getDeptById(id) {\n  return request({\n    url: '/sysDept/getById',\n    method: 'get',\n    params: {\n      id\n    }\n  });\n}\n\n// 添加部门\nexport function addDept(data) {\n  return request({\n    url: '/sysDept/add',\n    method: 'post',\n    data\n  });\n}\n\n// 更新部门\nexport function updateDept(data) {\n  return request({\n    url: '/sysDept/update',\n    method: 'post',\n    data\n  });\n}\n\n// 删除部门\nexport function deleteDept(id) {\n  return request({\n    url: '/sysDept/delete',\n    method: 'post',\n    params: {\n      id\n    }\n  });\n}","map":{"version":3,"names":["request","getDeptTree","params","url","method","id","then","response","console","log","data","deptArray","i","childResponse","push","e","warn","buildDeptTree","depts","deptMap","forEach","dept","children","result","parentId","getDeptById","addDept","updateDept","deleteDept"],"sources":["/Users/apple/Desktop/111111/zongheshixi/daijiaguanli/frontui/src/api/dept.js"],"sourcesContent":["import request from '@/utils/request'\n\n// 获取部门树 - 使用getById代替list，避免500错误\nexport function getDeptTree(params) {\n  // 首先获取根部门\n  return request({\n    url: '/sysDept/getById',\n    method: 'get',\n    params: { id: 1 }\n  }).then(async response => {\n    console.log('获取到根部门:', response);\n    \n    // 如果获取到根部门\n    if (response.data) {\n      // 创建部门数组\n      const deptArray = [response.data];\n      \n      // 尝试获取一些常见ID的部门（2-10），扩充部门列表\n      try {\n        for (let i = 2; i <= 10; i++) {\n          try {\n            const childResponse = await request({\n              url: '/sysDept/getById',\n              method: 'get',\n              params: { id: i }\n            });\n            \n            if (childResponse.data) {\n              deptArray.push(childResponse.data);\n            }\n          } catch (e) {\n            console.log(`部门ID=${i}不存在`);\n          }\n        }\n      } catch (e) {\n        console.warn('获取子部门失败', e);\n      }\n      \n      // 构建部门树结构\n      const buildDeptTree = (depts) => {\n        // 创建一个映射表\n        const deptMap = {};\n        depts.forEach(dept => {\n          dept.children = [];\n          deptMap[dept.id] = dept;\n        });\n        \n        // 构建树结构\n        const result = [];\n        depts.forEach(dept => {\n          if (dept.parentId && deptMap[dept.parentId]) {\n            // 如果有父节点，添加到父节点的children中\n            deptMap[dept.parentId].children.push(dept);\n          } else {\n            // 没有父节点或父节点不在列表中，作为根节点\n            result.push(dept);\n          }\n        });\n        \n        return result;\n      };\n      \n      // 返回构建好的树结构\n      response.data = buildDeptTree(deptArray);\n      console.log('构建的部门树结构:', response.data);\n    }\n    \n    return response;\n  });\n}\n\n// 获取部门详情\nexport function getDeptById(id) {\n  return request({\n    url: '/sysDept/getById',\n    method: 'get',\n    params: { id }\n  })\n}\n\n// 添加部门\nexport function addDept(data) {\n  return request({\n    url: '/sysDept/add',\n    method: 'post',\n    data\n  })\n}\n\n// 更新部门\nexport function updateDept(data) {\n  return request({\n    url: '/sysDept/update',\n    method: 'post',\n    data\n  })\n}\n\n// 删除部门\nexport function deleteDept(id) {\n  return request({\n    url: '/sysDept/delete',\n    method: 'post',\n    params: { id }\n  })\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}