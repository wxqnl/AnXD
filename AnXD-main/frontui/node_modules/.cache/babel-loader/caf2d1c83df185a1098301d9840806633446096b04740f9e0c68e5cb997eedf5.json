{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport { getDriverCount, getCustomerCount, getOrderCount, getTodayOrderCount, getRecentLoginLogs } from '@/api/dashboard';\nimport { getUserLoginLog } from '@/api/user';\n\n// 统计数据\n\nexport default {\n  __name: 'Dashboard',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const statistics = ref({\n      driverCount: 0,\n      customerCount: 0,\n      orderCount: 0,\n      todayOrderCount: 0\n    });\n\n    // 加载状态\n    const loading = ref({\n      driver: true,\n      customer: true,\n      order: true,\n      todayOrder: true,\n      loginLogs: true\n    });\n\n    // 最近登录记录\n    const loginLogs = ref([]);\n\n    // 获取司机总数\n    const fetchDriverCount = async () => {\n      try {\n        loading.value.driver = true;\n        const res = await getDriverCount();\n        statistics.value.driverCount = res.data || 0;\n      } catch (error) {\n        console.error('获取司机总数失败:', error);\n        // 如果API不存在或发生错误，显示模拟数据\n        statistics.value.driverCount = 120;\n      } finally {\n        loading.value.driver = false;\n      }\n    };\n\n    // 获取客户总数\n    const fetchCustomerCount = async () => {\n      try {\n        loading.value.customer = true;\n        const res = await getCustomerCount();\n        statistics.value.customerCount = res.data || 0;\n      } catch (error) {\n        console.error('获取客户总数失败:', error);\n        // 如果API不存在或发生错误，显示模拟数据\n        statistics.value.customerCount = 2356;\n      } finally {\n        loading.value.customer = false;\n      }\n    };\n\n    // 获取订单总数\n    const fetchOrderCount = async () => {\n      try {\n        loading.value.order = true;\n        const res = await getOrderCount();\n        statistics.value.orderCount = res.data || 0;\n      } catch (error) {\n        console.error('获取订单总数失败:', error);\n        // 如果API不存在或发生错误，显示模拟数据\n        statistics.value.orderCount = 15782;\n      } finally {\n        loading.value.order = false;\n      }\n    };\n\n    // 获取今日订单数\n    const fetchTodayOrderCount = async () => {\n      try {\n        loading.value.todayOrder = true;\n        const res = await getTodayOrderCount();\n        statistics.value.todayOrderCount = res.data || 0;\n      } catch (error) {\n        console.error('获取今日订单数失败:', error);\n        // 如果API不存在或发生错误，显示模拟数据\n        statistics.value.todayOrderCount = 58;\n      } finally {\n        loading.value.todayOrder = false;\n      }\n    };\n\n    // 获取最近登录记录\n    const fetchLoginLogs = async () => {\n      try {\n        loading.value.loginLogs = true;\n\n        // 尝试通过getRecentLoginLogs获取数据\n        try {\n          const res = await getRecentLoginLogs();\n          if (res.data && Array.isArray(res.data)) {\n            loginLogs.value = res.data;\n            return;\n          }\n        } catch (error) {\n          console.error('通过getRecentLoginLogs获取登录日志失败，尝试其他方法', error);\n        }\n\n        // 如果上面的方法失败，尝试通过getUserLoginLog获取\n        try {\n          const res = await getUserLoginLog({\n            pageNum: 1,\n            pageSize: 5\n          });\n          if (res.data && Array.isArray(res.data.records)) {\n            loginLogs.value = res.data.records;\n            return;\n          }\n        } catch (error) {\n          console.error('通过getUserLoginLog获取登录日志失败', error);\n        }\n\n        // 如果所有方法都失败，使用模拟数据\n        loginLogs.value = [{\n          username: 'admin',\n          ipaddr: '192.168.1.1',\n          loginTime: '2023-06-15 08:30:00'\n        }, {\n          username: 'user1',\n          ipaddr: '192.168.1.2',\n          loginTime: '2023-06-15 09:12:00'\n        }, {\n          username: 'user2',\n          ipaddr: '192.168.1.3',\n          loginTime: '2023-06-15 10:05:00'\n        }, {\n          username: 'user3',\n          ipaddr: '192.168.1.4',\n          loginTime: '2023-06-15 11:30:00'\n        }, {\n          username: 'user4',\n          ipaddr: '192.168.1.5',\n          loginTime: '2023-06-15 13:15:00'\n        }];\n      } catch (error) {\n        console.error('获取登录日志失败:', error);\n      } finally {\n        loading.value.loginLogs = false;\n      }\n    };\n\n    // 获取仪表盘数据\n    onMounted(() => {\n      fetchDriverCount();\n      fetchCustomerCount();\n      fetchOrderCount();\n      fetchTodayOrderCount();\n      fetchLoginLogs();\n    });\n    const __returned__ = {\n      statistics,\n      loading,\n      loginLogs,\n      fetchDriverCount,\n      fetchCustomerCount,\n      fetchOrderCount,\n      fetchTodayOrderCount,\n      fetchLoginLogs,\n      ref,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get getDriverCount() {\n        return getDriverCount;\n      },\n      get getCustomerCount() {\n        return getCustomerCount;\n      },\n      get getOrderCount() {\n        return getOrderCount;\n      },\n      get getTodayOrderCount() {\n        return getTodayOrderCount;\n      },\n      get getRecentLoginLogs() {\n        return getRecentLoginLogs;\n      },\n      get getUserLoginLog() {\n        return getUserLoginLog;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","ElMessage","getDriverCount","getCustomerCount","getOrderCount","getTodayOrderCount","getRecentLoginLogs","getUserLoginLog","statistics","driverCount","customerCount","orderCount","todayOrderCount","loading","driver","customer","order","todayOrder","loginLogs","fetchDriverCount","value","res","data","error","console","fetchCustomerCount","fetchOrderCount","fetchTodayOrderCount","fetchLoginLogs","Array","isArray","pageNum","pageSize","records","username","ipaddr","loginTime"],"sources":["/Users/apple/Desktop/111111/zongheshixi/daijiaguanli/frontui/src/pages/Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard-container\">\n    <el-row :gutter=\"20\">\n      <el-col :span=\"6\">\n        <el-card class=\"stat-card\">\n          <template #header>\n            <div class=\"card-header\">\n              <span>司机总数</span>\n            </div>\n          </template>\n          <div class=\"card-content\">\n            <el-statistic :value=\"statistics.driverCount\" :loading=\"loading.driver\">\n              <template #prefix>\n                <el-icon><Avatar /></el-icon>\n              </template>\n            </el-statistic>\n          </div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"6\">\n        <el-card class=\"stat-card\">\n          <template #header>\n            <div class=\"card-header\">\n              <span>客户总数</span>\n            </div>\n          </template>\n          <div class=\"card-content\">\n            <el-statistic :value=\"statistics.customerCount\" :loading=\"loading.customer\">\n              <template #prefix>\n                <el-icon><User /></el-icon>\n              </template>\n            </el-statistic>\n          </div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"6\">\n        <el-card class=\"stat-card\">\n          <template #header>\n            <div class=\"card-header\">\n              <span>订单总数</span>\n            </div>\n          </template>\n          <div class=\"card-content\">\n            <el-statistic :value=\"statistics.orderCount\" :loading=\"loading.order\">\n              <template #prefix>\n                <el-icon><ShoppingCart /></el-icon>\n              </template>\n            </el-statistic>\n          </div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"6\">\n        <el-card class=\"stat-card\">\n          <template #header>\n            <div class=\"card-header\">\n              <span>今日订单数</span>\n            </div>\n          </template>\n          <div class=\"card-content\">\n            <el-statistic :value=\"statistics.todayOrderCount\" :loading=\"loading.todayOrder\">\n              <template #prefix>\n                <el-icon><Calendar /></el-icon>\n              </template>\n            </el-statistic>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n    \n    <el-row :gutter=\"20\" style=\"margin-top: 20px;\">\n      <el-col :span=\"12\">\n        <el-card>\n          <template #header>\n            <div class=\"card-header\">\n              <span>系统信息</span>\n            </div>\n          </template>\n          <div class=\"info-item\">\n            <span class=\"label\">系统名称：</span>\n            <span class=\"value\">代驾管理系统</span>\n          </div>\n          <div class=\"info-item\">\n            <span class=\"label\">系统版本：</span>\n            <span class=\"value\">1.0.0</span>\n          </div>\n          <div class=\"info-item\">\n            <span class=\"label\">服务器：</span>\n            <span class=\"value\">Spring Boot</span>\n          </div>\n          <div class=\"info-item\">\n            <span class=\"label\">数据库：</span>\n            <span class=\"value\">MySQL</span>\n          </div>\n          <div class=\"info-item\">\n            <span class=\"label\">缓存：</span>\n            <span class=\"value\">Redis</span>\n          </div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"12\">\n        <el-card>\n          <template #header>\n            <div class=\"card-header\">\n              <span>最近登录</span>\n            </div>\n          </template>\n          <el-table :data=\"loginLogs\" style=\"width: 100%\" size=\"small\" v-loading=\"loading.loginLogs\">\n            <el-table-column prop=\"username\" label=\"用户名\" width=\"120\" />\n            <el-table-column prop=\"ipaddr\" label=\"IP地址\" width=\"120\" />\n            <el-table-column prop=\"loginTime\" label=\"登录时间\" />\n          </el-table>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport { getDriverCount, getCustomerCount, getOrderCount, getTodayOrderCount, getRecentLoginLogs } from '@/api/dashboard'\nimport { getUserLoginLog } from '@/api/user'\n\n// 统计数据\nconst statistics = ref({\n  driverCount: 0,\n  customerCount: 0,\n  orderCount: 0,\n  todayOrderCount: 0\n})\n\n// 加载状态\nconst loading = ref({\n  driver: true,\n  customer: true,\n  order: true,\n  todayOrder: true,\n  loginLogs: true\n})\n\n// 最近登录记录\nconst loginLogs = ref([])\n\n// 获取司机总数\nconst fetchDriverCount = async () => {\n  try {\n    loading.value.driver = true\n    const res = await getDriverCount()\n    statistics.value.driverCount = res.data || 0\n  } catch (error) {\n    console.error('获取司机总数失败:', error)\n    // 如果API不存在或发生错误，显示模拟数据\n    statistics.value.driverCount = 120\n  } finally {\n    loading.value.driver = false\n  }\n}\n\n// 获取客户总数\nconst fetchCustomerCount = async () => {\n  try {\n    loading.value.customer = true\n    const res = await getCustomerCount()\n    statistics.value.customerCount = res.data || 0\n  } catch (error) {\n    console.error('获取客户总数失败:', error)\n    // 如果API不存在或发生错误，显示模拟数据\n    statistics.value.customerCount = 2356\n  } finally {\n    loading.value.customer = false\n  }\n}\n\n// 获取订单总数\nconst fetchOrderCount = async () => {\n  try {\n    loading.value.order = true\n    const res = await getOrderCount()\n    statistics.value.orderCount = res.data || 0\n  } catch (error) {\n    console.error('获取订单总数失败:', error)\n    // 如果API不存在或发生错误，显示模拟数据\n    statistics.value.orderCount = 15782\n  } finally {\n    loading.value.order = false\n  }\n}\n\n// 获取今日订单数\nconst fetchTodayOrderCount = async () => {\n  try {\n    loading.value.todayOrder = true\n    const res = await getTodayOrderCount()\n    statistics.value.todayOrderCount = res.data || 0\n  } catch (error) {\n    console.error('获取今日订单数失败:', error)\n    // 如果API不存在或发生错误，显示模拟数据\n    statistics.value.todayOrderCount = 58\n  } finally {\n    loading.value.todayOrder = false\n  }\n}\n\n// 获取最近登录记录\nconst fetchLoginLogs = async () => {\n  try {\n    loading.value.loginLogs = true\n    \n    // 尝试通过getRecentLoginLogs获取数据\n    try {\n      const res = await getRecentLoginLogs()\n      if (res.data && Array.isArray(res.data)) {\n        loginLogs.value = res.data\n        return\n      }\n    } catch (error) {\n      console.error('通过getRecentLoginLogs获取登录日志失败，尝试其他方法', error)\n    }\n    \n    // 如果上面的方法失败，尝试通过getUserLoginLog获取\n    try {\n      const res = await getUserLoginLog({ pageNum: 1, pageSize: 5 })\n      if (res.data && Array.isArray(res.data.records)) {\n        loginLogs.value = res.data.records\n        return\n      }\n    } catch (error) {\n      console.error('通过getUserLoginLog获取登录日志失败', error)\n    }\n    \n    // 如果所有方法都失败，使用模拟数据\n    loginLogs.value = [\n      { username: 'admin', ipaddr: '192.168.1.1', loginTime: '2023-06-15 08:30:00' },\n      { username: 'user1', ipaddr: '192.168.1.2', loginTime: '2023-06-15 09:12:00' },\n      { username: 'user2', ipaddr: '192.168.1.3', loginTime: '2023-06-15 10:05:00' },\n      { username: 'user3', ipaddr: '192.168.1.4', loginTime: '2023-06-15 11:30:00' },\n      { username: 'user4', ipaddr: '192.168.1.5', loginTime: '2023-06-15 13:15:00' }\n    ]\n  } catch (error) {\n    console.error('获取登录日志失败:', error)\n  } finally {\n    loading.value.loginLogs = false\n  }\n}\n\n// 获取仪表盘数据\nonMounted(() => {\n  fetchDriverCount()\n  fetchCustomerCount()\n  fetchOrderCount()\n  fetchTodayOrderCount()\n  fetchLoginLogs()\n})\n</script>\n\n<style scoped>\n.dashboard-container {\n  padding: 20px;\n}\n\n.stat-card {\n  height: 150px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.card-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 80px;\n}\n\n.info-item {\n  margin-bottom: 10px;\n  display: flex;\n}\n\n.label {\n  width: 100px;\n  color: #606266;\n}\n\n.value {\n  color: #303133;\n  font-weight: 500;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}